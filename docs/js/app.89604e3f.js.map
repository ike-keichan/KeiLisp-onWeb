{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///./src/App.vue?9b05","webpack:///./src/lib/KeiLisp/Table.js","webpack:///./src/lib/KeiLisp/Applier.js","webpack:///./src/lib/Utility.js","webpack:///./src/App.vue?a8ad","webpack:///./src/lib/KeiLisp/LispInterpreter.js","webpack:///src/App.vue","webpack:///./src/App.vue?a7d1","webpack:///./src/App.vue","webpack:///./src/main.js","webpack:///./src/lib/KeiLisp/Evaluator.js","webpack:///./src/lib/KeiLisp/Loop.js","webpack:///./src/lib/KeiLisp/IntStream.js","webpack:///./src/lib/KeiLisp/NextState.js","webpack:///./src/lib/KeiLisp/Parser.js","webpack:///./src/lib/KeiLisp/Cons.js","webpack:///./src/lib/KeiLisp/InterpretedSymbol.js","webpack:///./src/lib/KeiLisp/StreamManager.js"],"names":["webpackJsonpCallback","data","moduleId","chunkId","chunkIds","moreModules","executeModules","i","resolves","length","Object","prototype","hasOwnProperty","call","installedChunks","push","modules","parentJsonpFunction","shift","deferredModules","apply","checkDeferredModules","result","deferredModule","fulfilled","j","depId","splice","__webpack_require__","s","installedModules","exports","module","l","m","c","d","name","getter","o","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","p","jsonpArray","window","oldJsonpFunction","slice","Table","aTable","source","root","this","keys","Cons","cloneValue","Error","set","aSymbol","isRoot","has","anObject","answer","setIfExit","aBoolean","Map","Applier","aStreamManager","aNumber","environment","streamManager","depth","args","isNumber","car","Math","abs","selectPrintFunction","nil","add_Number","cdr","init","aCons","isNotNil","each","procedure","isSymbol","selectProcedure","entrustEvaluator","target","isNotCons","nth","loop","equal_","InterpretedSymbol","of","isAtom","parameter","isNil","theCons","e","aList","methodName","String","isSpy","spyPrint","spyStream","toString","setDepth","buildInFunctions","R","isString","isCons","divide_Number","binding","Evaluator","eval","first","second","eq_","equals","format","format_AUX","index","state","buffer","token","aCharacter","size","Number","spaces","generateNumber","incrementGenerateNumber","process","out","getStream","greaterThan_Number","leftValue","rightValue","greaterThanOrEqual_Number","aString","isInteger","last","lessThan_Number","lessThanOrEqual_Number","list","isList","parameters","options","argumentsCons","temporaryCons","arg","consol","log","setCdr","setCar","member","mod_Number","multiply_Number","buildInFunction","userFunction","aStream","line","aPrintStream","stdout","indent","subtract_Number","lambda","theEnvironment","setup","aFunction","document","print","console","end","anElement","getElementById","focus","blur","clearPrintFunction","global","_vm","_h","$createElement","_c","_self","attrs","_m","_v","_s","output","prompt","directives","rawName","expression","domProps","on","$event","composing","input","messagePrint","clearPrint","staticRenderFns","LispInterpreter","initializeTable","StreamManager","parse","replace","setRoot","Array","forEach","component","Vue","config","productionTip","render","h","App","$mount","canvas","querySelector","isNotSymbol","bindAUX","count","theObject","theTable","clause","cond","consequent","variable","bool","expressions","bindingParallel","element","form","add","evaluateSymbol","specialForm","entrustApplier","forms","noTrace","location","reload","anIterator","hasNext","next","start","performance","now","trace","flag","Loop","remove","iterator","nextValue","done","asyncIterator","Promise","resolve","IntStream","afterEnd","rangeClosed","range","map","NextState","automaton","nextState","method","anAutomaton","PEEKCOUNT","Parser","stream","tokenString","states","initializeStateTransitionTable","nexts","nextChar","peekChar","concat","inputs","charCodeAt","fromCodePoint","atEnd","concatCharacter","rightParen","tokenToDouble","tokenToInteger","skippingSpaces","parseListAUX","nextToken","quote","tokenToSymbol","substring","nconc","equalsAUX","left","right","leftCons","rightCons","head","tail","clone","isTable","table","isTrace","streamTable","spyTable","traceStream","initialize","filePath","HOME","stderr","spyTable_","delete","setIsTrace","clear","setTraceStream"],"mappings":"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","file":"js/app.89604e3f.js","sourcesContent":[" \t// install a JSONP callback for chunk loading\n \tfunction webpackJsonpCallback(data) {\n \t\tvar chunkIds = data[0];\n \t\tvar moreModules = data[1];\n \t\tvar executeModules = data[2];\n\n \t\t// add \"moreModules\" to the modules object,\n \t\t// then flag all \"chunkIds\" as loaded and fire callback\n \t\tvar moduleId, chunkId, i = 0, resolves = [];\n \t\tfor(;i < chunkIds.length; i++) {\n \t\t\tchunkId = chunkIds[i];\n \t\t\tif(Object.prototype.hasOwnProperty.call(installedChunks, chunkId) && installedChunks[chunkId]) {\n \t\t\t\tresolves.push(installedChunks[chunkId][0]);\n \t\t\t}\n \t\t\tinstalledChunks[chunkId] = 0;\n \t\t}\n \t\tfor(moduleId in moreModules) {\n \t\t\tif(Object.prototype.hasOwnProperty.call(moreModules, moduleId)) {\n \t\t\t\tmodules[moduleId] = moreModules[moduleId];\n \t\t\t}\n \t\t}\n \t\tif(parentJsonpFunction) parentJsonpFunction(data);\n\n \t\twhile(resolves.length) {\n \t\t\tresolves.shift()();\n \t\t}\n\n \t\t// add entry modules from loaded chunk to deferred list\n \t\tdeferredModules.push.apply(deferredModules, executeModules || []);\n\n \t\t// run deferred modules when all chunks ready\n \t\treturn checkDeferredModules();\n \t};\n \tfunction checkDeferredModules() {\n \t\tvar result;\n \t\tfor(var i = 0; i < deferredModules.length; i++) {\n \t\t\tvar deferredModule = deferredModules[i];\n \t\t\tvar fulfilled = true;\n \t\t\tfor(var j = 1; j < deferredModule.length; j++) {\n \t\t\t\tvar depId = deferredModule[j];\n \t\t\t\tif(installedChunks[depId] !== 0) fulfilled = false;\n \t\t\t}\n \t\t\tif(fulfilled) {\n \t\t\t\tdeferredModules.splice(i--, 1);\n \t\t\t\tresult = __webpack_require__(__webpack_require__.s = deferredModule[0]);\n \t\t\t}\n \t\t}\n\n \t\treturn result;\n \t}\n\n \t// The module cache\n \tvar installedModules = {};\n\n \t// object to store loaded and loading chunks\n \t// undefined = chunk not loaded, null = chunk preloaded/prefetched\n \t// Promise = chunk loading, 0 = chunk loaded\n \tvar installedChunks = {\n \t\t\"app\": 0\n \t};\n\n \tvar deferredModules = [];\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \tvar jsonpArray = window[\"webpackJsonp\"] = window[\"webpackJsonp\"] || [];\n \tvar oldJsonpFunction = jsonpArray.push.bind(jsonpArray);\n \tjsonpArray.push = webpackJsonpCallback;\n \tjsonpArray = jsonpArray.slice();\n \tfor(var i = 0; i < jsonpArray.length; i++) webpackJsonpCallback(jsonpArray[i]);\n \tvar parentJsonpFunction = oldJsonpFunction;\n\n\n \t// add entry module to deferred list\n \tdeferredModules.push([0,\"chunk-vendors\"]);\n \t// run deferred modules when ready\n \treturn checkDeferredModules();\n","export * from \"-!../node_modules/mini-css-extract-plugin/dist/loader.js??ref--6-oneOf-1-0!../node_modules/css-loader/dist/cjs.js??ref--6-oneOf-1-1!../node_modules/vue-loader/lib/loaders/stylePostLoader.js!../node_modules/postcss-loader/src/index.js??ref--6-oneOf-1-2!../node_modules/cache-loader/dist/cjs.js??ref--0-0!../node_modules/vue-loader/lib/index.js??vue-loader-options!./App.vue?vue&type=style&index=0&lang=css&\"","// #!/usr/bin/env node\n\n'use strict';\n\n//モジュール「Cons」を読み込む。\nimport { Cons } from './Cons.js';\n\n/**\n * @class\n * @classdesc インタプリテッドシンボルの束縛を管理するクラス\n * @author Keisuke Ikeda\n * @this {Table}\n */\nexport class Table extends Map\n{\n    /**\n     * コンストラクタメソッド\n     * @constructor\n     * @param {Table} aTable この環境が生まれた環境\n     * @return {Table} 自身\n     */\n    constructor(aTable = null)\n    {\n        super();\n        this.source = aTable;\n        this.root = (aTable == null) ? true : false; \n\n        return this;\n    }\n\n    /**\n     * 自身（Table）を複製し、応答するメソッド\n     * @return {Table} 複製したTable\n     */\n    clone()\n    {\n        let aTable = new Table(this);\n        for(let key of this.keys)\n        {\n            let value = Cons.cloneValue(this.get(key));\n            if(value != null){ aTable.set(key, value); }\n            else { throw new Error('RuntimeException!'); }\n        }\n\n        return aTable;\n    }\n\n    /**\n     * 引数のプロパティ（キー）が束縛しているものがあるかどうかを判別し、応答するメソッド\n     * @param {Symbol} aSymbol プロパティ（キー）\n     * @return {Boolean} 真偽値\n     */\n    has(aSymbol)\n    {\n        if( super.has(aSymbol) ){ return true; }\n        if(this.isRoot()){ return false; }\n\n        return this.source.has(aSymbol);\n    }\n    \n    /**\n     * 自身と引数が等しいかどうかを判別し、応答するメソッド\n     * @param {*} anObject 判別するオブジェクト\n     * @return {Boolean} 真偽値\n     */\n    equals(anObject)\n    {\n        return super.equals(anObject);\n    }\n\n    /**\n     * インタプリテッドシンボルが束縛しているものを応答するメソッド\n     * @return {Symbol} インタプリテッドシンボル\n     * @return {Object} インタプリテッドシンボルが束縛している値\n     */\n    get(aSymbol)\n    {\n        if(super.has(aSymbol)){ return super.get(aSymbol); }\n        if(this.isRoot()){ return null; }\n\n        return this.source.get(aSymbol);\n    }\n\n    /**\n     * このインスタンスが環境の根であるかどうかを判別し、応答するメソッド\n     * @return {Boolean} 真偽値\n     */\n    isRoot()\n    {\n        return this.root;\n    }\n\n    /**\n     * この環境にインタプリテッドシンボルは登録されていなければ、上書きするメソッド\n     * @param {Symbol} aSymbol 登録するインタプリテッドシンボル\n     * @param {*} anObject 束縛する値\n     * @return {*} 結果\n     */\n    setIfExit(aSymbol, anObject)\n    {\n        let answer;\n        if( super.has(aSymbol) ){ answer = this.set(aSymbol, anObject); }\n        if(this.isRoot()){ answer = null; }\n        else { answer = this.source.setIfExit(aSymbol, anObject); }\n\n        return answer;\n    }\n\n    /**\n     * このインスタンス環境の根があるかどうかを判別し、応答するメソッド\n     * @param {*} aBoolean \n     * @return {Null} 何も返さない\n     */\n    setRoot(aBoolean)\n    {\n        this.root = aBoolean;\n        return null;\n    }\n\n    /**\n     * 環境を設定するメソッド\n     * @param {Table} aTable\n     * @return {Null} 何も返さない\n     */\n    setSource(aTable)\n    {\n        this.source = aTable;\n        return null;\n    }\n}\n","// #!/usr/bin/env node\n\n'use strict';\n\n// ライブラリ「Ramda」を読み込む。\nimport * as R from 'ramda'; \n\n// モジュール「Cons」を読み込む。\nimport { Cons } from './Cons.js';\n\n// モジュール「Evaluator」を読み込む。\nimport { Evaluator } from './Evaluator.js';\n\n//モジュール「InterpretedSymbol」を読み込む。\nimport { InterpretedSymbol } from './InterpretedSymbol';\n\n// モジュール「StreamManager」を読み込む。\nimport { StreamManager } from './StreamManager.js';\n\n// モジュール「Table」を読み込む。\nimport { Table } from './Table.js';\n\n// モジュール「selectPrintFunction」を読み込む。\nimport { selectPrintFunction } from '../Utility.js'\n\n/**\n * Lispの万能関数のApplyを模倣したクラス\n * @class\n * @classdesc \n * @author Keisuke Ikeda\n * @this {Applier}\n */\nexport class Applier extends Object\n{\n    /**\n     * Lispの関数とJSの関数を紐づけるテーブル\n     */\n    static buildInFunctions = Applier.setup();\n\n    /**\n\t * gensymで後ろに結合する数字\n\t */\n    static generateNumber = 0;\n\n    /**\n     * コンストラクタメソッド\n     * @constructor\n     * @param {Table} aTable 環境のテーブル（予約語）\n     * @param {StreamManager} aStreamManager\n     * @param {Number} aNumber 呼び出しの深さ\n     * @return {Applier} 自身\n     */\n    constructor(aTable, aStreamManager, aNumber)\n    {\n        super();\n        this.environment = new Table(aTable);\n        this.streamManager = aStreamManager;\n        this.depth = aNumber;\n\n        return this;\n    }\n\n    /**\n     * 引数の絶対値を応答するメソッド\n     * @param {Cons} args 引数\n     * @return {Number} 計算結果\n     */\n    abs(args)\n    {\n        if(Cons.isNumber(args.car)){ return Math.abs(args.car); }\n        else { selectPrintFunction()('Can not apply \\\"abs\\\" to \\\"' + args.car + '\\\"'); }\n\n        return Cons.nil;\n    }\n\n    /**\n     * 引数の値の和を応答するメソッド\n     * @param {Cons} args 引数\n     * @return {Number} 計算結果\n     */\n    add(args)\n    {\n        if(Cons.isNumber(args.car)) { return this.add_Number(args.car, args.cdr); }\n        else { selectPrintFunction()('Can not apply \\\"add\\\" to \\\"' + args.car + '\\\"'); }\n\n        return Cons.nil;\n    }\n\n    /**\n     * Number型の値の和を応答するメソッド\n     * @param {Number} init 第1引数\n     * @param {Cons} args 第2~引数\n     * @return {Number} 計算結果\n     */\n    add_Number(init, args)\n    {\n        let result = init;\n        let aCons = args;\n\n        while(Cons.isNotNil(aCons))\n        {\n            let each = aCons.car;\n            if(Cons.isNumber(each)){ result = result + each; }\n            else \n            { \n                selectPrintFunction()('Can not apply \\\"add\\\" to \\\"' + each + '\\\"'); \n                return Cons.nil; \n            }\n            aCons = aCons.cdr;\n        }\n\n        return result;\n    }\n\n    /**\n     * Applierを実行するメソッド\n     * @param {*} procedure 関数名、又はオペレータ\n     * @param {*} args 引数の値\n     * @param {Table} environment 環境のテーブル（予約語）\n     * @param {StreamManager} aStreamManager \n     * @param {Number} depth 呼び出しの深さ\n     * @return {*} 計算結果 \n     */\n    static apply(procedure, args, environment, aStreamManager, depth)\n    {\n        return new Applier(environment, aStreamManager, depth).apply(procedure, args);\n    }\n\n    /**\n     * Applierを実行するメソッド\n     * @param {*} procedure 関数名、又はオペレータ\n     * @param {*} args 引数の値\n     * @return {*} 計算結果\n     */\n    apply(procedure, args)\n    {\n        if(Cons.isSymbol(procedure)){ return this.selectProcedure(procedure, args); }\n        return this.entrustEvaluator(procedure, args);\n    }\n\n    /**\n     * 第2引数から第1引数で指定される項目を検索し、応答するメソッド\n     * @param {Cons} args 引数\n     * @return {*} 評価結果\n     */\n    assoc(args)\n    {\n        let aCons = new Cons();\n        let target = args.car;\n\n        if(Cons.isNotCons(args.nth(2))){ return Cons.nil; }\n        aCons = args.nth(2);\n\n        for(let each of aCons.loop())\n        {\n            if(Cons.isNotCons(each)){ selectPrintFunction()('Can not apply \\\"assoc\\\" to \\\"' + each + '\\\"') }\n            let key = each.car;\n            if(this.equal_(new Cons(target, new Cons(key, Cons.nil))) == InterpretedSymbol.of('t')){ return each; }\n        }\n\n        return Cons.nil;\n    }\n\n    /**\n     * 引数がAtomかどうかを判別し、応答するメソッド。\n     * @param {Cons} args 引数\n     * @return {*} 評価結果\n     */\n    atom_(args)\n    {\n        if(Cons.isAtom(args.car)){ return InterpretedSymbol.of('t'); }\n        return Cons.nil;\n    }\n\n    /**\n     * 引数と値を束縛するメソッド\n     * @param {Cons} parameter 値\n     * @param {Cons} args 引数\n     * @return {Null} 何も返さない。\n     */\n    binding(parameter, args)\n    {\n        if(Cons.isNil(parameter)){ return null; }\n        let aCons = parameter;\n        let theCons = args;\n        \n        while(Cons.isNotNil(aCons))\n        {\n            try { this.environment.set(aCons.car, theCons.car); }\n            catch(e) { selectPrintFunction()('sizes do not match.'); return null; }\n\n            if(Cons.isNotCons(aCons.cdr)){ break; }\n            aCons = aCons.cdr;\n            theCons = theCons.cdr;\n        }\n\n        if(Cons.isAtom(aCons.cdr) && (Cons.isNotNil(aCons.cdr)))\n        {\n            try { this.environment.set(aCons.cdr, theCons.cdr); }\n            catch(e) { selectPrintFunction()('sizes do not match.'); return null; }\n        }else if(Cons.isNotNil(aCons.cdr)){ throw new Error('Can not binding value to \\\"' + aList.cdr() + '\\\"'); }\n\n        return null;\n    }\n\n    /**\n     * 組み込み関数を実行し、結果を応答するメソッド\n     * @param {InterpretedSymbol} procedure 関数名、又はオペレータ\n     * @param {Cons} args 引数\n     * @return {*} 計算結果\n     */\n    buildInFunction(procedure, args)\n    {\n        let answer = Cons.nil;\n        let methodName = new String();\n\n        if(this.isSpy(procedure))\n        {\n            this.spyPrint(this.streamManager.spyStream(procedure), (new Cons(procedure, args)).toString());\n            this.setDepth(this.depth + 1);\n        }\n\n        methodName = Applier.buildInFunctions.get(procedure);\n\n        try { let method = this[methodName]; }\n        catch(e){ selectPrintFunction()('Not Found Method: ' + methodName); }\n\n        answer = R.invoker(1, methodName)(args, this); \n\n        if(this.isSpy(procedure))\n        {\n            this.setDepth(this.depth - 1);\n            this.spyPrint(this.streamManager.spyStream(procedure), answer + ' <== ' + new Cons(procedure, args));\n        }\n       \n        return answer;\n    }\n\n    /**\n     * 引数の先頭（car）を応答するメソッド\n     * @param {Cons} args\n     * @return {*} 引数の先頭\n     */\n    car(args)\n    {\n        return args.car.car;\n    }\n\n     /**\n     * 引数の先頭以外（cdr）を応答するメソッド\n     * @param {Cons} args\n     * @return {*} 引数の先頭以外\n     */\n    cdr(args)\n    {\n        return args.car.cdr;\n    }\n\n    /**\n     * 引数が文字(Character)かどうかを判別し、応答するメソッド。\n     * @param {Cons} args 引数\n     * @return {*} 評価結果\n     */\n    character_(args)\n    {\n        if(Cons.isString(args.car) && args.car.length == 1){ return InterpretedSymbol.of('t'); }\n        return Cons.nil;\n    }\n\n    /**\n     * 第一引数と第二引数のリストを結合し、応答するメソッド\n     * @param {Cons} args 引数\n     * @return {*} 評価結果\n     */\n    cons(args)\n    {\n        return new Cons(args.car, args.nth(2));\n    }\n\n    /**\n     * 引数がConsかどうかを判別し、応答するメソッド。\n     * @param {Cons} args 引数\n     * @return {*} 評価結果\n     */\n    cons_(args)\n    {\n        if(Cons.isCons(args.car)){ return InterpretedSymbol.of('t'); }\n        return Cons.nil;\n    }\n\n    /**\n     * 引数のリストを複製し、応答するメソッド\n     * @param {Cons} args 引数\n     * @return {*} 評価結果\n     */\n    copy(args)\n    {\n        return Cons.cloneValue(args.car);\n    }\n\n    /**\n     * 引数の値の商を応答するメソッド\n     * @param {Cons} args 引数\n     * @return {Number} 計算結果\n     */\n    divide(args)\n    {\n        if(Cons.isNumber(args.car)) { return this.divide_Number(args.car, args.cdr); }\n        else { selectPrintFunction()('Can not apply \\\"divide\\\" to \\\"' + args.car + '\\\"'); }\n\n        return Cons.nil;\n    }\n\n    /**\n     * Number型の値の商を応答するメソッド\n     * @param {Number} init 第1引数\n     * @param {Cons} args 第2~引数\n     * @return {Number} 計算結果\n     */\n    divide_Number(init, args)\n    {\n        let result = init;\n        let aCons = args;\n\n        while(Cons.isNotNil(aCons))\n        {\n            let each = aCons.car;\n            if(Cons.isNumber(each)){ result = result / each; }\n            else { selectPrintFunction()('Can not apply \\\"divide\\\" to \\\"' + each + '\\\"'); return Cons.nil; }\n            aCons = aCons.cdr;\n        }\n\n        return result;\n    }\n\n    /**\n     * 引数が浮動小数倍精度数(Double)かどうかを判別し、応答するメソッド。\n     * @param {Cons} args 引数\n     * @return {*} 評価結果\n     */\n    double_(args)\n    {\n        if(Cons.isNumber(args.car)){ return InterpretedSymbol.of('t'); }\n        return Cons.nil;\n    }\n\n    /**\n     * ApplierでできないことをEvaluatorに任せ、結果を応答するメソッド\n     * @param {Cons} procedure 関数名、又はオペレータ\n     * @param {Cons} args 引数の値\n     */\n    entrustEvaluator(procedure, args)\n    {\n        let anObject = Cons.nil;\n        let aCons = procedure.cdr;\n        this.binding(aCons.car, args);\n        aCons = aCons.cdr;\n\n        for(let each of aCons.loop())\n        {\n            if(each instanceof Table){ break; }\n            anObject = Evaluator.eval(each, this.environment, this.streamManager, this.depth);\n        }\n\n        return anObject;\n    }\n\n    /**\n     * 2つの引数の同値性を判別し、応答するメソッド\n     * @param {Cons} args 引数\n     * @return {*} 評価結果\n     */\n    eq_(args)\n    {\n        let first = args.car;\n        let second = args.nth(2);\n        if(first === second){ return InterpretedSymbol.of('t'); }\n        \n        return Cons.nil;\n    }\n\n    /**\n     * 2つの引数の同一性を判別し、応答するメソッド\n     * @param {Cons} args 引数\n     * @return {*} 評価結果\n     */\n    equal_(args)\n    {\n        let first = args.car;\n        let second = args.nth(2);\n        if(this.eq_(args) == InterpretedSymbol.of('t')){ return InterpretedSymbol.of('t'); }\n        if(Cons.isCons(first) && Cons.isCons(second))\n        {\n            if(first.equals(second)){ return InterpretedSymbol.of('t'); }\n            if(second.equals(first)){ return InterpretedSymbol.of('t'); }\n        }\n        \n        return Cons.nil;\n    }\n\n    /**\n     * 指定されたフォーマットで出力を行うメソッド\n     * @param {Cons} args 引数\n     * @return {Cons} nil\n     */\n    format(args)\n    {\n        if(!Cons.isString(args.car)){ selectPrintFunction()('Can not apply \\\"format\\\" to \\\"' + args.car + '\\\"'); }\n        let aCons = args.cdr;\n        let format = this.format_AUX(new String(args.car), aCons);\n        selectPrintFunction()(String(format), '');\n        \n        return Cons.nil;\n    }\n\n    /**\n     * formatの補助メソッド\n     * @param {String} format 指定フォーマット\n     * @param {Cons} aCons フォーマットに割り当てる変数\n     * @return {String} 指定フォーマットに合わせて整えた文字列\n     */\n    format_AUX(format, aCons)\n    {\n        let theCons = aCons;\n        let index = 0;\n        let state = 0;\n        let buffer = new String();\n        let token = new String();\n\n        while(index < format.length)\n        {\n            let aCharacter = format[index];\n            if(state == 0)\n            {\n                if(aCharacter == '~'){ state = 1; }\n                else{ buffer += aCharacter; }\n            }\n            else if (state == 1)\n\t\t\t{\n\t\t\t\tswitch (aCharacter)\n\t\t\t\t{\n                    case '0': case '1': case '2': case '3':\tcase '4': case '5':\tcase '6': case '7': case '8': case '9':\n                        token += aCharacter;\n                        state = 2;\n                        break;\n                    case 'a':\n                        buffer += theCons.car.toString();\n                        theCons = theCons.cdr;\n                        state = 0;\n                        break;\n                    case '%':\n                        buffer += '\\n';\n                        state = 0;\n                        break;\n                    case '-':\n                        state = 3;\n                        break;\n                    default:\n                        buffer += '~';\n                        buffer += aCharacter;\n                        state = 0;\n                    }\n            }\n            else if (state == 2)\n            {\n                let size;\n                let value = new String();\n\n                switch (aCharacter)\n                {\n                    case '0': case '1': case '2': case '3':\tcase '4': case '5':\tcase '6': case '7': case '8': case '9':\n                        token += aCharacter;\n                        state = 2;\n                        break;\n                    case 'a':\n                        size = Number(token.toString());\n                        token = new String();\n                        if(Cons.isNil(theCons)){ selectPrintFunction()('size do not match.'); return; }\n                        value = theCons.car.toString();\n                        theCons = theCons.cdr;\n                        while(value.length() < size){ value += ' '; }\n                        buffer += value;\n                        state = 0;\n                        break;\n                    default:\n                        buffer += '~';\n                        buffer += token.toString() + aCharacter;\n                        token = new String();\n                        state = 0;\n                }\n            }\n            else if (state == 3)\n            {\n                let size;\n                let spaces = new String();\n                let value = new String();\n\n                switch (aCharacter)\n                {\n                    case '0': case '1': case '2': case '3':\tcase '4': case '5':\tcase '6': case '7': case '8': case '9':\n                        token += aCharacter;\n                        state = 3;\n                        break;\n                    case 'a':\n                        size = Number(token.toString());\n                        token = new String();\n                        if(Cons.isNil(theCons)){ selectPrintFunction()('size do not match.'); return; }\n                        value = theCons.car.toString();\n                        theCons = theCons.cdr;\n                        spaces = \"\";\n                        while(value.length() + spaces.length() < size){ spaces += ' '; }\n                        buffer += spaces + value;\n                        state = 0;\n                        break;\n                    default:\n                        buffer += '~';\n                        buffer += '-';\n                        buffer += token.toString() + aCharacter;\n                        token = new String();\n                        state = 0;\n                }\n            }\n            else{ selectPrintFunction()('Error!'); }\n            index++;\n        }\n        if(Cons.isNotNil(theCons)){ selectPrintFunction()('size do not match.'); return; }\n        \n        return buffer;\n    }\n\n    /**\n     * 引数が浮動小数単精度数(Float)かどうかを判別し、応答するメソッド。\n     * @param {Cons} args 引数\n     * @return {*} 評価結果\n     */\n    float_(args)\n    {\n        if(Cons.isNumber(args.car))\n        {\n            if(-3.4E+38 <= args.car && args.car <= 3.4E+38){ return InterpretedSymbol.of('t'); } \n        }\n        return Cons.nil;\n    }\n\n    /**\n     * 新たなインタプリテッドシンボルを応答するメソッド\n     * @param {Cons} args 引数\n     * @return {*} 評価結果\n     */\n    gensym(args = null)\n    {\n        let aSymbol = InterpretedSymbol.of(\"id\" + Applier.generateNumber);\n        Applier.incrementGenerateNumber();\n\n        return aSymbol;\n    }\n\n    getStream(anObject)\n    {\n        if(this.streamManager == null){ return process.out; }\n        if(anObject instanceof String || (typeof anObject) == \"string\"){ return process.out; }\n\n        return this.streamManager.getStream();\n    }\n\n    /**\n     * 2つの値が大なり関係にあるかどうか判別し、応答するメソッド\n     * @param {Cons} args 引数\n     * @return {*} 評価結果\n     */\n    greaterThan(args)\n    {\n        if(Cons.isNumber(args.car)) { return this.greaterThan_Number(args.car, args.cdr); }\n        else { selectPrintFunction()('Can not apply \\\">\\\" to \\\"' + args.car + '\\\"'); }\n\n        return Cons.nil;\n    }\n\n    /**\n     * Number型の2つの値が大なり関係にあるかどうか判別し、応答するメソッド\n     * @param {Number} init 第1引数\n     * @param {Cons} args 第2~引数\n     * @return {*} 評価結果\n     */\n    greaterThan_Number(init, args)\n    {\n        let leftValue = init;\n        let aCons = args;\n        let aBoolean = true;\n\n        while(Cons.isNotNil(aCons))\n        {\n            let rightValue = aCons.car;\n            if(Cons.isNumber(rightValue)){ aBoolean = leftValue > rightValue; }\n            else { selectPrintFunction()('Can not apply \\\">\\\" to \\\"' + rightValue + '\\\"'); return Cons.nil; }\n            if(aBoolean == false){ return Cons.nil }\n            leftValue = rightValue;\n            aCons = aCons.cdr;\n        }\n\n        return InterpretedSymbol.of('t');\n    }\n\n    /**\n     * 二つの値が大なりイコール関係にあるかどうか判別し、応答するメソッド\n     * @param {Cons} args 引数\n     * @return {*} 評価結果\n     */\n    greaterThanOrEqual(args)\n    {\n        if(Cons.isNumber(args.car)) { return this.greaterThanOrEqual_Number(args.car, args.cdr); }\n        else { selectPrintFunction()('Can not apply \\\">=\\\" to \\\"' + args.car + '\\\"'); }\n\n        return Cons.nil;\n    }\n\n    /**\n     * Number型の二つの値が大なりイコール関係にあるかどうか判別し、応答するメソッド\n     * @param {Number} init 第1引数\n     * @param {Cons} args 第2~引数\n     * @return {*} 評価結果\n     */\n    greaterThanOrEqual_Number(init, args)\n    {\n        let leftValue = init;\n        let aCons = args;\n        let aBoolean = true;\n\n        while(Cons.isNotNil(aCons))\n        {\n            let rightValue = aCons.car;\n            if(Cons.isNumber(rightValue)){ aBoolean = leftValue >= rightValue; }\n            else { selectPrintFunction()('Can not apply \\\">=\\\" to \\\"' + rightValue + '\\\"'); return Cons.nil; }\n            if(aBoolean == false){ return Cons.nil }\n            leftValue = rightValue;\n            aCons = aCons.cdr;\n        }\n\n        return InterpretedSymbol.of('t');\n    }\n\n    /**\n     * gensymで後ろに結合する数字を1つ増加させるメソッド\n     * @return {Null} 何も返さない。\n     */\n    static incrementGenerateNumber()\n    {\n        Applier.generateNumber++;\n        return null;\n    }\n\n    /**\n\t * 深さ分のインデント文字列を応答するメソッド\n\t * @return {String} インデント文字列\n\t */\n    indent()\n    {\n        let index = 0;\n        let aString = new String();\n        aString += \"\";\n        while(index++ < this.depth){ aString += \"| \"; }\n\n        return aString;\n    }\n\n    /**\n     * 引数が整数(Integer)かどうかを判別し、応答するメソッド。\n     * @param {Cons} args 引数\n     * @return {*} 評価結果\n     */\n    integer_(args)\n    {\n        if(Cons.isNumber(args.car) && Number.isInteger(args.car)){ return InterpretedSymbol.of('t'); }\n        return Cons.nil;\n    }\n\n    /**\n     * スパイする必要があるかどうかを判別し、応答するメソッド\n     * @param {InterpretedSymbol} aSymbol\n     * @return {Boolean} 真偽値\n     */\n    isSpy(aSymbol)\n    {\n        return this.streamManager.isSpy(aSymbol);\n    }\n\n    /**\n     * 引数の最後のセルを応答するメソッド\n     * @param {Cons} args 引数\n     * @return {*} 評価結果\n     */\n    last(args)\n    {\n        if(Cons.isNotCons(args)){ return Cons.nil; }\n        let aCons = args.car;\n\n        return aCons.last();\n    }\n\n    /**\n     * 2つの値が小なり関係にあるかどうか判別し、応答するメソッド\n     * @param {Cons} args 引数\n     * @return {*} 評価結果\n     */\n    lessThan(args)\n    {\n        if(Cons.isNumber(args.car)) { return this.lessThan_Number(args.car, args.cdr); }\n        else { selectPrintFunction()('Can not apply \\\"<\\\" to \\\"' + args.car + '\\\"'); }\n\n        return Cons.nil;\n    }\n\n    /**\n     * Number型の2つの値が小なり関係にあるかどうか判別し、応答するメソッド\n     * @param {Number} init 第1引数\n     * @param {Cons} args 第2~引数\n     * @return {*} 評価結果\n     */\n    lessThan_Number(init, args)\n    {\n        let leftValue = init;\n        let aCons = args;\n        let aBoolean = true;\n\n        while(Cons.isNotNil(aCons))\n        {\n            let rightValue = aCons.car;\n            if(Cons.isNumber(rightValue)){ aBoolean = leftValue < rightValue; }\n            else { selectPrintFunction()('Can not apply \\\"<\\\" to \\\"' + rightValue + '\\\"'); return Cons.nil; }\n            if(aBoolean == false){ return Cons.nil }\n            leftValue = rightValue;\n            aCons = aCons.cdr;\n        }\n\n        return InterpretedSymbol.of('t');\n    }\n\n    /**\n     * 2つの値が小なりイコール関係にあるかどうか判別し、応答するメソッド\n     * @param {Cons} args 引数\n     * @return {*} 評価結果\n     */\n    lessThanOrEqual(args)\n    {\n        if(Cons.isNumber(args.car)) { return this.lessThanOrEqual_Number(args.car, args.cdr); }\n        else { selectPrintFunction()('Can not apply \\\"<=\\\" to \\\"' + args.car + '\\\"'); }\n\n        return Cons.nil;\n    }\n\n    /**\n     * Number型の2つの値が小なりイコール関係にあるかどうか判別し、応答するメソッド\n     * @param {Number} init 第1引数\n     * @param {Cons} args 第2~引数\n     * @return {*} 評価結果\n     */\n    lessThanOrEqual_Number(init, args)\n    {\n        let leftValue = init;\n        let aCons = args;\n        let aBoolean = true;\n\n        while(Cons.isNotNil(aCons))\n        {\n            let rightValue = aCons.car;\n            if(Cons.isNumber(rightValue)){ aBoolean = leftValue <= rightValue; }\n            else { selectPrintFunction()('Can not apply \\\"<=\\\" to \\\"' + rightValue + '\\\"'); return Cons.nil; }\n            if(aBoolean == false){ return Cons.nil }\n            leftValue = rightValue;\n            aCons = aCons.cdr;\n        }\n\n        return InterpretedSymbol.of('t');\n    }\n\n    /**\n\t * 引数の値をリストにまとめて応答する.\n\t * @param args\n\t * @return {*} 評価結果\n\t */\n    list(args)\n    {\n        if(Cons.isNil(args)){ return Cons.nil; }\n        return new Cons(args.car, this.list(args.cdr));\n    }\n\n    /**\n     * 引数がリストかどうかを判別し、応答するメソッド。\n     * @param {Cons} args 引数\n     * @return {*} 評価結果\n     */\n    list_(args)\n    {\n        if(Cons.isList(args.car)){ return InterpretedSymbol.of('t'); }\n        return Cons.nil;\n    }\n\n    /**\n     * 第2引数に第1引数で指定された関数を適用し、応答するメソッド\n     * @param {Cons} args 引数\n     * @return {*} 評価結果\n     */\n    mapcar(args)\n    {\n        let aCons = new Cons(Cons.nil, Cons.nil);\n        let procedure = args.car;\n        let parameters = args.nth(2);\n        let options = args.cdr.cdr;\n        let theCons = aCons;\n        let index = 1;\n\n        for(let each of parameters.loop())\n        {\n            let argumentsCons = new Cons(Cons.nil, Cons.nil);\n            let temporaryCons = argumentsCons;\n            let anObject;\n\n            if(Cons.isNotNil(each)){\n                for(let arg of options.loop())\n                {\n                    if(Cons.isNotCons(arg)){ consol.log('sizes do not match.'); return Cons.nil; }\n                    temporaryCons.setCdr(new Cons(arg.nth(index), Cons.nil));\n                    temporaryCons = temporaryCons.cdr;\n                }\n            }\n\n            argumentsCons.setCar(each);\n            anObject = Applier.apply(procedure, argumentsCons, this.environment, this.streamManager, this.depth);\n            theCons.setCdr(new Cons(anObject, Cons.nil));\n            theCons = theCons.cdr;\n            index++;\n        }\n\n        return aCons.cdr;\n    }\n\n    /**\n     * 第2引数に第1引数の要素があれば、その要素が先頭となるConsを応答するメソッド\n     * @param {Cons} args 引数\n     * @return {*} 評価結果\n     */\n    member(args)\n    {\n        let aSymbol = InterpretedSymbol.of('equal?');\n        if(Cons.isNotNil(args.nth(3))){ aSymbol = args.nth(3); }\n        if(Cons.isNotCons(args.nth(2))){ return Cons.nil; }\n        let aCons = args.nth(2);\n\n        while(Cons.isCons(aCons))\n        {\n            let anObject = null;\n\n            if(aSymbol == InterpretedSymbol.of('eq?')){ anObject = this.eq_(new Cons(args.car, new Cons(aCons.car, Cons.nil))); }\n            if(aSymbol == InterpretedSymbol.of('equal?')){ anObject = this.equal_(new Cons(args.car, new Cons(aCons.car, Cons.nil))); }\n            if(anObject == null){ selectPrintFunction()('Can not apply \\\"member\\\" to \\\"' + aSymbol + '\\\"') }\n            if(anObject == InterpretedSymbol.of('t')){ return aCons; }\n\n            aCons = aCons.cdr;\n        }\n\n        return Cons.nil;\n    }\n\n    /**\n     * 第2引数に第1引数の要素があるかどうかを判別し、応答するメソッド\n     * @param {Cons} args 引数\n     * @return {*} 評価結果\n     */\n    memq(args)\n    {\n        if(this.member(args) == Cons.nil){ return Cons.nil; }\n        else{ return InterpretedSymbol.of('t'); }\n    }\n\n    /**\n     * 引数の値の剰余を応答するメソッド\n     * @param {Cons} args 引数\n     * @return {Number} 計算結果\n     */\n    mod(args)\n    {\n        if(Cons.isNumber(args.car)) { return this.mod_Number(args.car, args.cdr); }\n        else { selectPrintFunction()('Can not apply \\\"mod\\\" to \\\"' + args.car + '\\\"'); }\n\n        return Cons.nil;\n    }\n\n    /**\n     * Number型の値の剰余を応答するメソッド\n     * @param {Number} init 第1引数\n     * @param {Cons} args 第2~引数\n     * @return {Number} 計算結果\n     */\n    mod_Number(init, args)\n    {\n        let result = init;\n        let aCons = args;\n\n        while(Cons.isNotNil(aCons))\n        {\n            let each = aCons.car;\n            if(Cons.isNumber(each)){ result = result % each; }\n            else { selectPrintFunction()('Can not apply \\\"mod\\\" to \\\"' + each + '\\\"'); return Cons.nil; }\n            aCons = aCons.cdr;\n        }\n\n        return result;\n    }\n\n    /**\n     * 引数の値の積を応答するメソッド\n     * @param {Cons} args 引数\n     * @return {Number} 計算結果\n     */\n    multiply(args)\n    {\n        if(Cons.isNumber(args.car)) { return this.multiply_Number(args.car, args.cdr); }\n        else { selectPrintFunction()('Can not apply \\\"multiply\\\" to \\\"' + args.car + '\\\"'); }\n\n        return Cons.nil;\n    }\n\n    /**\n     * Number型の差の積を応答するメソッド\n     * @param {Number} init 第1引数\n     * @param {Cons} args 第2~引数\n     * @return {Number} 計算結果\n     */\n    multiply_Number(init, args)\n    {\n        let result = init;\n        let aCons = args;\n\n        while(Cons.isNotNil(aCons))\n        {\n            let each = aCons.car;\n            if(Cons.isNumber(each)){ result = result * each; }\n            else { selectPrintFunction()('Can not apply \\\"multiply\\\" to \\\"' + each + '\\\"'); return Cons.nil; }\n            aCons = aCons.cdr;\n        }\n\n        return result;\n    }\n\n    /**\n     * eqの否定を応答するメソッド\n     * @param {Cons} args 引数\n     * @return {*} 評価結果\n     */\n    neq(args)\n    {\n        if(this.eq_(args) == InterpretedSymbol.of('t')){ return Cons.nil; }\n        else{ return InterpretedSymbol.of('t') }\n    }\n\n    /**\n     * equalの否定を応答するメソッド\n     * @param {Cons} args 引数\n     * @return {*} 評価結果\n     */\n    nequal(args)\n    {\n        if(this.equal_(args) == InterpretedSymbol.of('t')){ return Cons.nil; }\n        else{ return InterpretedSymbol.of('t') }\n    }\n\n    /**\n     * 第2引数の第1引数番目の要素を応答するメソッド\n     * @param {Cons} args 引数\n     * @return {*} 評価結果\n     */\n    nth(args)\n    {\n        if(!Number.isInteger(args.car)){ return Cons.nil; }\n        let index = args.car;\n        let aCons = args.nth(2);\n\n        return aCons.nth(index);\n    }\n\n    /**\n     * 引数がnilかどうかを判別し、応答するメソッド。\n     * @param {Cons} args 引数\n     * @return {*} 評価結果\n     */\n    null_(args)\n    {\n        if(Cons.isNil(args.car)){ return InterpretedSymbol.of('t'); }\n        return Cons.nil;\n    }\n\n    /**\n     * 引数がNumberかどうかを判別し、応答するメソッド。\n     * @param {Cons} args 引数\n     * @return {*} 評価結果\n     */\n    number_(args)\n    {\n        if(Cons.isNumber(args.car)){ return InterpretedSymbol.of('t'); }\n        return Cons.nil;\n    }\n\n    /**\n     * 実行する処理を選択し、実行するメソッド\n     * @param {InterpretedSymbol} procedure 関数名、又はオペレータ\n     * @param {Cons} args 引数\n     * @return {*} 計算結果\n     */\n    selectProcedure(procedure, args)\n    {\n        if(Applier.buildInFunctions.has(procedure)){ return this.buildInFunction(procedure, args); }\n        if(this.environment.has(procedure)){ return this.userFunction(procedure, args); }\n        selectPrintFunction()('I could find no procedure description for ' + procedure);\n\n        return Cons.nil;\n    }\n\n    /**\n     * 呼び出しの深さを設定するメソッド\n     * @param {Number} aNumber 呼び出しの深さ\n     * @return {Null} 何も返さない。\n     */\n    setDepth(aNumber)\n    {\n        this.depth = aNumber;\n        return null;\n    }\n\n    /**\n     * Lispの関数とJSの関数を紐づけるテーブルを応答するメソッド\n     * @return {Table} 生成したテーブル\n     */\n    static setup()\n    {\n        try\n        {\n            let aTable = new Map();\n            aTable.set(InterpretedSymbol.of(\"abs\"), \"abs\");\n\t\t\taTable.set(InterpretedSymbol.of(\"add\"), \"add\");\n\t\t\taTable.set(InterpretedSymbol.of(\"assoc\"), \"assoc\");\n\t\t\taTable.set(InterpretedSymbol.of(\"atom\"), \"atom_\");\n\t\t\taTable.set(InterpretedSymbol.of(\"car\"), \"car\");\n\t\t\taTable.set(InterpretedSymbol.of(\"cdr\"), \"cdr\");\n\t\t\taTable.set(InterpretedSymbol.of(\"characterp\"), \"character_\");\n            aTable.set(InterpretedSymbol.of(\"cons\"), \"cons\");\n            aTable.set(InterpretedSymbol.of(\"consp\"), \"cons_\");\n            aTable.set(InterpretedSymbol.of(\"copy\"), \"copy\");\n            aTable.set(InterpretedSymbol.of(\"floatp\"), \"float_\");\n\t\t\taTable.set(InterpretedSymbol.of(\"divide\"), \"divide\");\n\t\t\taTable.set(InterpretedSymbol.of(\"doublep\"), \"double_\");\n\t\t\taTable.set(InterpretedSymbol.of(\"eq\"), \"eq_\");\n\t\t\taTable.set(InterpretedSymbol.of(\"equal\"), \"equal_\");\n\t\t\taTable.set(InterpretedSymbol.of(\"format\"), \"format\");\n\t\t\taTable.set(InterpretedSymbol.of(\"gensym\"), \"gensym\");\n\t\t\taTable.set(InterpretedSymbol.of(\"integerp\"), \"integer_\");\n\t\t\taTable.set(InterpretedSymbol.of(\"last\"), \"last\");\n\t\t\taTable.set(InterpretedSymbol.of(\"list\"), \"list\");\n\t\t\taTable.set(InterpretedSymbol.of(\"listp\"), \"list_\");\n\t\t\taTable.set(InterpretedSymbol.of(\"mapcar\"), \"mapcar\");\n            aTable.set(InterpretedSymbol.of(\"member\"), \"member\");\n            aTable.set(InterpretedSymbol.of(\"memq\"), \"memq\");\n\t\t\taTable.set(InterpretedSymbol.of(\"mod\"), \"mod\");\n            aTable.set(InterpretedSymbol.of(\"multiply\"), \"multiply\");\n            aTable.set(InterpretedSymbol.of(\"neq\"), \"neq\");\n            aTable.set(InterpretedSymbol.of(\"nequal\"), \"nequal\");\n\t\t\taTable.set(InterpretedSymbol.of(\"nth\"), \"nth\");\n\t\t\taTable.set(InterpretedSymbol.of(\"null\"), \"null_\");\n\t\t\taTable.set(InterpretedSymbol.of(\"numberp\"), \"number_\");\n\t\t\taTable.set(InterpretedSymbol.of(\"subtract\"), \"subtract\");\n\t\t\taTable.set(InterpretedSymbol.of(\"stringp\"), \"string_\");\n\t\t\taTable.set(InterpretedSymbol.of(\"symbolp\"), \"symbol_\");\n\t\t\taTable.set(InterpretedSymbol.of(\"+\"), \"add\");\n\t\t\taTable.set(InterpretedSymbol.of(\"-\"), \"subtract\");\n\t\t\taTable.set(InterpretedSymbol.of(\"*\"), \"multiply\");\n            aTable.set(InterpretedSymbol.of(\"/\"), \"divide\");\n            aTable.set(InterpretedSymbol.of(\"//\"), \"mod\");\n            aTable.set(InterpretedSymbol.of(\"==\"), \"eq_\");\n            aTable.set(InterpretedSymbol.of(\"=\"), \"equal_\");\n            aTable.set(InterpretedSymbol.of(\"~~\"), \"neq\");\n            aTable.set(InterpretedSymbol.of(\"~=\"), \"nequal\");\n\t\t\taTable.set(InterpretedSymbol.of(\"<\"), \"lessThan\");\n\t\t\taTable.set(InterpretedSymbol.of(\"<=\"), \"lessThanOrEqual\");\n\t\t\taTable.set(InterpretedSymbol.of(\">\"), \"greaterThan\");\n\t\t\taTable.set(InterpretedSymbol.of(\">=\"), \"greaterThanOrEqual\");\n            \n            return aTable;\n        }\n        catch(e){ throw new Error('NullPointerException (Applier, initialize)'); }\n    }\n\n    spyPrint(aStream, line)\n    {\n        let aPrintStream = process.stdout;\n        if(aStream != null){ selectPrintFunction()(aStream); }\n        selectPrintFunction()(this.indent() + line);\n        if(aStream != null){ selectPrintFunction()(aPrintStream); }\n        return null;\n    }\n\n    /**\n     * 引数がStringかどうかを判別し、応答するメソッド。\n     * @param {Cons} args 引数\n     * @return {*} 評価結果\n     */\n    string_(args)\n    {\n        if(Cons.isString(args.car)){ return InterpretedSymbol.of('t'); }\n        return Cons.nil;\n    }\n\n    /**\n     * 引数の値の差を応答するメソッド\n     * @param {Cons} args 引数\n     * @return {Number} 計算結果\n     */\n    subtract(args)\n    {\n        if(Cons.isNumber(args.car)) { return this.subtract_Number(args.car, args.cdr); }\n        else { selectPrintFunction()('Can not apply \\\"subtract\\\" to \\\"' + args.car + '\\\"'); }\n\n        return Cons.nil;\n    }\n\n    /**\n     * Number型の差の商を応答するメソッド\n     * @param {Number} init 第1引数\n     * @param {Cons} args 第2~引数\n     * @return {Number} 計算結果\n     */\n    subtract_Number(init, args)\n    {\n        let result = init;\n        let aCons = args;\n\n        while(Cons.isNotNil(aCons))\n        {\n            let each = aCons.car;\n            if(Cons.isNumber(each)){ result = result - each; }\n            else { selectPrintFunction()('Can not apply \\\"subtract\\\" to \\\"' + each + '\\\"'); return Cons.nil; }\n            aCons = aCons.cdr;\n        }\n\n        return result;\n    }\n\n    /**\n     * 引数がInterpretedSymbolかどうかを判別し、応答するメソッド。\n     * @param {Cons} args 引数\n     * @return {*} 評価結果\n     */\n    symbol_(args)\n    {\n        if (Cons.isSymbol(args.car)) { return InterpretedSymbol.of('t'); }\n        return Cons.nil;\n    }\n\n    /**\n     * ユーザ定義関数を実行し、結果を応答するメソッド\n     * @param {InterpretedSymbol} procedure 関数名、又はオペレータ\n     * @param {Cons} args 引数\n     * @return {*} 計算結果\n     */\n    userFunction(procedure, args)\n    {\n        if(this.isSpy(procedure))\n        {\n            this.spyPrint(this.streamManager.spyStream(procedure), (new Cons(procedure, args)).toString());\n            this.setDepth(this.depth + 1);\n        }\n\n        let lambda = this.environment.get(procedure);\n        let theEnvironment = lambda.last().car;\n        let answer = Applier.apply(lambda, args, theEnvironment, this.streamManager, this.depth);\n\n        if(this.isSpy(procedure))\n        {\n            this.setDepth(this.depth - 1);\n            this.spyPrint(this.streamManager.spyStream(procedure), answer + ' <== ' + new Cons(procedure, args));\n        }\n\n        return answer;\n    }\n}\n","// #!/usr/bin/env node\n\n'use strict';\n\nglobal.console;\nglobal.document;\nglobal.module;\nglobal.print;\nglobal.window;\n\n/**\n * 適切なプリントアウトを行う関数を、実行状況から選び出して、それを応答する関数\n */\nexport function selectPrintFunction()\n{\n    let aFunction = null;\n \n    if (typeof document === \"undefined\"){\n        if (typeof print === \"function\") { aFunction = (anObject) => { print(anObject); }; }\n        else { aFunction = (anObject) => { console.log(anObject); }; }\n    } else {\n        aFunction = (anObject, end = '\\n') => {\n            let anElement = document.getElementById(\"Message\");\n            anElement.value += anObject + end; \n            anElement.focus();\n            anElement.blur();\n        };\n    }\n \n    return aFunction;\n}\n/**\n * 出力をクリアする関数\n */\nexport function clearPrintFunction()\n{\n    let anElement = document.getElementById(\"Clear\");\n    anElement.focus();\n    anElement.blur();\n \n    return;\n}\n","var render = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',{attrs:{\"id\":\"app\"}},[_vm._m(0),_c('pre',[_vm._v(_vm._s(_vm.output)+_vm._s(_vm.prompt)),_c('input',{directives:[{name:\"model\",rawName:\"v-model\",value:(_vm.input),expression:\"input\"}],attrs:{\"id\":\"clinput\",\"name\":\"clinput\",\"type\":\"text\",\"autocomplete\":\"off\"},domProps:{\"value\":(_vm.input)},on:{\"input\":function($event){if($event.target.composing){ return; }_vm.input=$event.target.value}}})]),_c('textarea',{attrs:{\"id\":\"Message\",\"cols\":\"1\",\"rows\":\"1\",\"readonly\":\"\"},on:{\"focus\":_vm.messagePrint}}),_c('textarea',{attrs:{\"id\":\"Clear\",\"cols\":\"1\",\"rows\":\"1\",\"readonly\":\"\"},on:{\"focus\":_vm.clearPrint}})])}\nvar staticRenderFns = [function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('h4',[_vm._v(\" Hello! This is an interpreter that mimics Lisp, \\\"KeiLisp\\\".\"),_c('br'),_vm._v(\" 2020.12.04 created by Keisuke Ikeda. \")])}]\n\nexport { render, staticRenderFns }","// #!/usr/bin/env node\n\n'use strict';\n\n// モジュール「Cons」を読み込む。\nimport { Cons } from './Cons.js';\n\n// モジュール「Evaluator」を読み込む。\nimport { Evaluator } from './Evaluator.js';\n\n//モジュール「InterpretedSymbol」を読み込む。\nimport { InterpretedSymbol } from './InterpretedSymbol';\n\n// モジュール「StreamManager」を読み込む。\nimport { StreamManager } from './StreamManager.js';\n\n// モジュール「Table」を読み込む。\nimport { Table } from './Table.js';\n\n// モジュール「selectPrintFunction」を読み込む。\nimport { selectPrintFunction } from '../Utility.js'\n\n/**\n * @class\n * @classdesc インタプリタのクラス\n * @author Keisuke Ikeda\n * @this {LispInterpreter}\n */\nexport class LispInterpreter extends Object\n{\n    /**\n\t * コンストラクタメソッド\n     * @constructor\n     * @return {LispInterpreter} 自身\n\t */\n    constructor()\n\t{\n        super();\n        // このインスタンスの環境を保持する変数\n        this.root = this.initializeTable();\n        // ストリームを管理する変数\n        this.streamManager = new StreamManager();\n\n        return this;\n    }\n\n    /**\n     * 引数のリストを評価し、評価値を応答するメソッド\n     * @param {Cons} aCons 評価するリスト\n     * @return {Object} 評価値\n     */\n    eval(aCons)\n    {\n        let anObject = Cons.nil;\n\n        try { anObject = Evaluator.eval(aCons, this.root, this.streamManager); }\n        catch (e) \n        {\n            selectPrintFunction()('*** can not eval ' + aCons.toString() + ' ***');\n            anObject = Cons.nil; \n        }\n\n        // anObject = Evaluator.eval(aCons, this.root, this.streamManager); //デバック用\n\n        return anObject;\n    }\n\n    /**\n     * 引数の文字列をパースし、リストにして応答するメソッド\n     * @param {String} aString パースする文字列\n     * @return {Cons} パースしたリスト\n     */\n    parse(aString)\n    {\n        let aCons = null;\n\n        try { aCons = Cons.parse('(' + aString + '\\n);'); }\n        catch (e)\n        {\n            selectPrintFunction()('*** can not parse ' + aString.replace( /\\n/g , \"\" ) + ' ***');\n            aCons = Cons.nil;\n        }\n\n        return aCons;\n    }\n\n    /**\n\t * 指定された環境を環境の根として設定する.\n\t * @param {Table} environment\n     * @return {Null} 何も返さない。\n\t */\n    setRoot(environment)\n    {\n        if(environment instanceof Table)\n        {\n            environment.setRoot(true);\n            this.root = environment;\n        }\n\n        return null;\n    }\n\n    /**\n     * 環境のテーブルを初期化するメソッド\n     * @return {Table} 初期化した環境のテーブル\n     */\n    initializeTable()\n    {\n        let aList = new Array();\n        let aTable = new Table();\n        aTable.setRoot(true);\n        \n        aList.push('abs');\n        aList.push('add');\n        aList.push('and');\n        aList.push('apply');\n        aList.push('assoc');\n        aList.push('atom');\n        aList.push('bind');\n        aList.push('car');\n        aList.push('cdr');\n        aList.push('characterp');\n        aList.push('clear');\n        aList.push('cond');\n        aList.push('cons');\n        aList.push('consp');\n        aList.push('copy');\n        aList.push('floatp');\n        aList.push('defun');\n        aList.push('divide');\n        aList.push('do');\n        aList.push('do*');\n        aList.push('dolist');\n        aList.push('doublep');\n        aList.push('eq\b');\n        aList.push('equal');\n        aList.push('exit');\n        aList.push('gc');\n        aList.push('gensym');\n        aList.push('if');\n        aList.push('integerp');\n        aList.push('lambda');\n        aList.push('let');\n        aList.push('let*');\n        aList.push('last');\n        aList.push('list');\n        aList.push('listp');\n        aList.push('mapcar');\n        aList.push('member');\n        aList.push('memq');\n        aList.push('mod');\n        aList.push('multiply');\n        aList.push('neq');\n        aList.push('nequal');\n        aList.push('not');\n        aList.push('notrace');\n        aList.push('nth');\n        aList.push('null');\n        aList.push('numberp');\n        aList.push('or');\n        aList.push('pop');\n        aList.push('progn');\n        aList.push('printc');\n        aList.push('print');\n        aList.push('push');\n        aList.push('quote');\n        aList.push('reload');\n        aList.push('rplaca');\n        aList.push('rplacd');\n        aList.push('setq');\n        aList.push('set-allq');\n        aList.push('subtract');\n        aList.push('stringp');\n        aList.push('symbolp');\n        aList.push('terpri');\n        aList.push('time');\n        aList.push('trace');\n        aList.push('unless');\n        aList.push('when');\n        aList.push('+');\n        aList.push('-');\n        aList.push('*');\n        aList.push('/');\n        aList.push('//');\n        aList.push('=');\n        aList.push('==');\n        aList.push('~=');\n        aList.push('~~');\n        aList.push('<');\n        aList.push('<=');\n        aList.push('>');\n        aList.push('>=');\n\n        aList.forEach(each => {\n            let aSymbol = InterpretedSymbol.of(each);\n            aTable.set(aSymbol, aSymbol)\n        });\n\n        let aString = new String();\n        let aCons = new Cons();\n        aString = \"(lambda (list1 list2) (cond ((atom list1) nil) ((atom list2) nil) ((null list1) list2) (t (cons (car list1) (append (cdr list1) list2)))))\";\n        aCons = Cons.parse(aString);\n        aCons.last().setCdr(new Cons(aTable, Cons.nil));\n        aTable.set(InterpretedSymbol.of('append'), aCons);\n\n        aString = \"(lambda (l n) (cond ((<= (length l) n) nil) (t (cons (car l) (butlast (cdr l) n)))))\";\n        aCons = Cons.parse(aString);\n        aCons.last().setCdr(new Cons(aTable, Cons.nil));\n\t\taTable.set(InterpretedSymbol.of('butlast'), aCons);\n\n\t\taString = \"(lambda (l) (cond ((atom l) nil) ((null l) 0)\t(t (+ 1 (length (cdr l))))))\";\n        aCons = Cons.parse(aString);\n        aCons.last().setCdr(new Cons(aTable, Cons.nil));\n\t\taTable.set(InterpretedSymbol.of('length'), aCons);\n\n\t\taString = \"(lambda (n l) (cond ((> n (length l)) nil) ((= 0 n) l) (t (nthcdr (- n 1) (cdr l)))))\";\n        aCons = Cons.parse(aString);\n        aCons.last().setCdr(new Cons(aTable, Cons.nil));\n\t\taTable.set(InterpretedSymbol.of('nthcdr'), aCons);\n\n\t\taString = \"(lambda (l) (cond ((atom l) l) ((null l) '()) (t (append (reverse (cdr l)) (list (car l))))))\";\n        aCons = Cons.parse(aString);\n        aCons.last().setCdr(new Cons(aTable, Cons.nil));\n        aTable.set(InterpretedSymbol.of('reverse'), aCons);\n        \n        aTable.set(InterpretedSymbol.of('t'), InterpretedSymbol.of('t'));\n\n        return aTable;\n    }\n}\n","<template>\n    <div id=\"app\">\n        <h4>\n            Hello! This is an interpreter that mimics Lisp, \"KeiLisp\".<br>\n            2020.12.04 created by Keisuke Ikeda.\n        </h4>\n        <pre>{{ output }}{{ prompt }}<input id=\"clinput\" name=\"clinput\" type=\"text\" v-model=\"input\" autocomplete=\"off\"></pre>\n        <textarea @focus=\"messagePrint\" id=\"Message\" cols=\"1\" rows=\"1\" readonly></textarea>\n        <textarea @focus=\"clearPrint\" id=\"Clear\" cols=\"1\" rows=\"1\" readonly></textarea>\n    </div>\n</template>\n\n<script>\nimport { LispInterpreter } from './lib/KeiLisp/LispInterpreter.js'\nimport { Cons } from './lib/KeiLisp/Cons.js'\n\nexport default {\n    name: 'App',\n    data() {\n        return {\n            interpreter: {},\n            prompt: '>>   ',\n            input: '',\n            output: '',\n            buffer: '',\n            aCons: '',\n            history: [],\n            index: 0,\n            leftParentheses: 0,\n        }\n    },\n    created: function() {\n        this.interpreter = new LispInterpreter()\n    },\n    mounted: function() {\n        this.addEvent();\n    },\n    methods: {\n        exec () {\n            this.buffer += ' ';\n\n            for(let aCharacter of this.input)\n            {\n                if(aCharacter == '(') { this.leftParentheses++; }\n                if(aCharacter == ')') { this.leftParentheses--; }\n                this.buffer += aCharacter;\n            }\n\n            this.print(this.prompt + this.input + '\\n');\n\n            if(this.leftParentheses > 0){ this.prompt = '. . .  ' }\n            else{ this.prompt = '>>   ' }\n\n            if(this.leftParentheses <= 0)\n            {\n                this.aCons = this.interpreter.parse(this.buffer);\n                try\n                {\n                    for(let each of this.aCons.loop()){ this.print(this.interpreter.eval(each).toString() + '\\n'); }\n                }\n                catch (e) \n                {\n                    this.print('*** can not eval ' + this.aCons.toString() + ' ***\\n');\n                    this.print(Cons.nil.toString() + '\\n');\n                }\n\n                this.leftParentheses = 0;\n                this.buffer = ''; \n            }\n\n            if(this.input != ''){ this.history.push(this.input); }\n            this.input = ' ';\n            this.index = this.history.length;\n        },\n        addEvent(){\n            document.getElementById(\"clinput\").focus()\n            document.getElementsByTagName('html')[0].onclick = () => {\n                document.getElementById(\"clinput\").focus()\n            }\n            document.getElementById(\"clinput\").addEventListener('keypress', (e) => {\n                const key = e.keyCode || e.charCode || 0;\n                if (key == 13) {\n                    this.exec();\n                    e.preventDefault();\n                }\n            }, false)\n            document.onkeydown = (key) => {\n                if (key.keyCode == '38')\n                {\n                    if(0 < this.index){ this.index --; }\n                    else if(this.index <= 0){ this.index = 0; }\n                    if(this.history[this.index] != undefined){ this.input = this.history[this.index]; }\n                }\n                else if (key.keyCode == '40')\n                {\n                    if(this.index < this.history.length){ this.index ++; }\n                    else if(this.history.length  < this.index){ this.index = this.history.length; }\n                    if(this.history.length == this.index){ this.input = ''; }\n                    else if(this.history[this.index] != undefined){ this.input = this.history[this.index]; }\n                }\n            }\n        },\n        clearPrint() {\n            this.output = '';\n        },\n        messagePrint() {\n            this.print(document.getElementById('Message').value)\n            document.getElementById('Message').value = '';\n        },\n        print(aString) {\n            this.output += aString;\n        }\n    }\n}\n</script>\n<style>\n#app {\n    font-size: 1.17em;\n    font-weight: bold;\n    font-family: Ricty Diminished Discord;\n    -webkit-font-smoothing: antialiased;\n    -moz-osx-font-smoothing: grayscale;\n    text-align: start;\n}\n\n#clinput {\n    width: 95%;\n}\n\n.contents {\n    height: 100%;\n    width: 100%;\n}\n\nhtml {\n    height: 100vh;\n}\n\nbutton {\n    display: none;\n}\n\ninput, textarea {\n    border:none;\n    font-size : 100%;\n    font-weight: inherit;\n    font-family : inherit;\n    outline:none;\n    resize: none;\n}\n\ntextarea {\n    display: block;\n}\n\n@media (prefers-color-scheme: dark) {\n    html, input, textarea {\n        background-color: #000;\n        color: #0066cc;\n    }\n}\n</style>\n","import mod from \"-!../node_modules/cache-loader/dist/cjs.js??ref--12-0!../node_modules/thread-loader/dist/cjs.js!../node_modules/babel-loader/lib/index.js!../node_modules/cache-loader/dist/cjs.js??ref--0-0!../node_modules/vue-loader/lib/index.js??vue-loader-options!./App.vue?vue&type=script&lang=js&\"; export default mod; export * from \"-!../node_modules/cache-loader/dist/cjs.js??ref--12-0!../node_modules/thread-loader/dist/cjs.js!../node_modules/babel-loader/lib/index.js!../node_modules/cache-loader/dist/cjs.js??ref--0-0!../node_modules/vue-loader/lib/index.js??vue-loader-options!./App.vue?vue&type=script&lang=js&\"","import { render, staticRenderFns } from \"./App.vue?vue&type=template&id=57628dd4&\"\nimport script from \"./App.vue?vue&type=script&lang=js&\"\nexport * from \"./App.vue?vue&type=script&lang=js&\"\nimport style0 from \"./App.vue?vue&type=style&index=0&lang=css&\"\n\n\n/* normalize component */\nimport normalizer from \"!../node_modules/vue-loader/lib/runtime/componentNormalizer.js\"\nvar component = normalizer(\n  script,\n  render,\n  staticRenderFns,\n  false,\n  null,\n  null,\n  null\n  \n)\n\nexport default component.exports","import Vue from 'vue'\nimport App from './App.vue'\n\nVue.config.productionTip = false\n\nnew Vue({\n  render: h => h(App),\n}).$mount('#app')\n","// #!/usr/bin/env node\n\n'use strict';\n\n// ライブラリ「Ramda」を読み込む。\nimport * as R from 'ramda'; \n\n// モジュール「Applier」を読み込む。\nimport { Applier } from './Applier.js';\n\n// モジュール「Cons」を読み込む。\nimport { Cons } from './Cons.js';\n\n//モジュール「InterpretedSymbol」を読み込む。\nimport { InterpretedSymbol } from './InterpretedSymbol';\n\n// モジュール「StreamManager」を読み込む。\nimport { StreamManager } from './StreamManager.js';\n\n// モジュール「Table」を読み込む。\nimport { Table } from './Table.js';\n\n// モジュール「selectPrintFunction」を読み込む。\nimport { selectPrintFunction, clearPrintFunction } from '../Utility.js'\n\nglobal.console;\nglobal.document;\nglobal.module;\nglobal.print;\nglobal.window;\n\n/**\n * @class\n * @classdesc Lispの万能関数のEvaluateを模倣したクラス\n * @author Keisuke Ikeda\n * @this {Evaluator}\n */\nexport class Evaluator extends Object\n{\n    /**\n     * Lispの関数とJSの関数を紐づけるテーブル\n     */\n    static buildInFunctions = Evaluator.setup();\n\n    /**\n     * コンストラクタメソッド\n     * @constructor\n     * @param {Table} aTable 環境のテーブル（予約語）\n     * @param {StreamManager} aStreamManager\n     * @param {Number} aNumber 呼び出しの深さ\n     * @return {Evaluator} 自身\n     */\n    constructor(aTable, aStreamManager, aNumber)\n    {\n        super();\n        this.environment = aTable;\n        this.streamManager = aStreamManager;\n        this.depth = aNumber;\n        this.canvas = document.querySelector(\"#glCanvas\");\n\n        return this;\n    }\n\n    /**\n     * 引数を評価し、その論理積を応答するメソッド\n     * @param {Cons} aCons 評価するCons\n     * @return {*} 評価結果\n     */\n    and(aCons)\n    {\n        for(let each of aCons.loop())\n        {\n            let anObject = Evaluator.eval(each, this.environment, this.streamManager, this.depth);\n            if(Cons.isNil(anObject)){ return Cons.nil; }\n        }\n\n        return InterpretedSymbol.of('t');\n    }\n\n    /**\n     * 第2引数のリストに対して、第1引数の関数で評価し、応答するメソッド\n     * @param {Cons} aCons 評価するCons\n     * @return {*} 評価結果\n     */\n    apply_lisp(aCons)\n    {\n        let procedure = Evaluator.eval(aCons.car, this.environment, this.streamManager, this.depth);\n        let args = Evaluator.eval(aCons.nth(2), this.environment, this.streamManager, this.depth);\n        let aTable = this.environment;\n        if(procedure instanceof Cons && procedure.last().car instanceof Table){ aTable = procedure.last().car; }\n\n        return Applier.apply(procedure, args, aTable, this.streamManager, this.depth);\n    }\n\n    /**\n     * インタプリテッドシンボルが何重に束縛されているか応答するメソッド\n     * @param {Cons} aCons 評価するCons\n     * @return {*} 評価結果\n     */\n    bind(aCons)\n    {\n        if(Cons.isNotSymbol(aCons.car)){ selectPrintFunction()('Can not apply \\\"bind\\\" to \\\"' + aCons.car + '\\\"'); return Cons.nil;}\n        let aSymbol = aCons.car;\n        if(!this.environment.has(aSymbol)){ return Cons.nil; }\n\n        return this.bindAUX(aSymbol);\n    }\n\n    /**\n     * bindの補助メソッド\n     * @param {InterpretedSymbol} aSymbol 対象のシンボル\n     * @return {Number} 束縛されている数\n     */\n    bindAUX(aSymbol)\n    {\n        let aTable = this.environment;\n        let anObject = aTable.get(aSymbol);\n        let count = 1;\n\n        while(aTable != null)\n        {\n            if(!aTable.has(aSymbol)){ break; }\n            let theObject = aTable.get(aSymbol);\n            if(theObject != anObject)\n            {\n                count++;\n                anObject = theObject;\n            }\n            aTable = aTable.source;\n        }\n\n        return count;\n    }\n\n    /**\n     * 指定された環境に、パラメータを逐次評価し設定する、let*とdo*の補助メソッド\n     * @param {Cons} parameters 評価するCons\n     * @param {Table} aTable 指定した環境\n     * @param {Null} 何も返さない。\n     */\n    binding(parameters, aTable)\n    {\n        for(let each of parameters.loop())\n        {\n            let theCons = each;\n            let key = null;\n            if(Cons.isSymbol(theCons.car)){ key = theCons.car; }\n            else{ selectPrintFunction()('\\\"' + theCons.car + '\\\" is not symbol'); }\n            let value = Evaluator.eval(theCons.nth(2), aTable, this.streamManager, this.depth);\n            aTable.set(key, value);\n        }\n\n        return null;\n    }\n\n    /**\n     * 指定された環境に、パラメータを並列評価し設定する、letとdoの補助メソッド\n     * @param {Cons} parameters 評価するCons\n     * @param {Table} aTable 指定した環境\n     * @param {Null} 何も返さない。\n     */\n    bindingParallel(parameters, aTable)\n    {\n        let theTable = new Map();\n        for(let each of parameters.loop())\n        {\n            let theCons = each;\n            let key = null;\n            if(Cons.isSymbol(theCons.car)){ key = theCons.car; }\n            else{ selectPrintFunction()('\\\"' + theCons.car + '\\\" is not symbol'); }\n            let value = Evaluator.eval(theCons.nth(2), aTable, this.streamManager, this.depth);\n            theTable.set(key, value);\n        }\n\n        for(let [key, value] of theTable){ aTable.set(key, value); }\n\n        return null;\n    }\n\n    /**\n     * ブラウザの出力を削除するメソッド、KeiLisp-onWeb専用。\n     * @param {*} args 引数\n     * @return {InterpretedSymbol} インタプリテッドシンボルt\n     */\n    clear(args = null)\n    {\n        clearPrintFunction();\n        return InterpretedSymbol.of('t');\n    }\n\n    /**\n     * 最初の式の結果によって、処理を振り分け、式を評価していくメソッド\n     * @param {Cons} aCons 評価するCons\n     * @return {*} 評価結果\n     */\n    cond(aCons)\n    {\n        if(Cons.isNil(aCons)){ return Cons.nil; }\n        let clause = aCons.car;\n        let anObject = Evaluator.eval(clause.car, this.environment, this.streamManager, this.depth);\n        if(Cons.isNil(anObject)){ return this.cond(aCons.cdr); }\n        else\n        {\n            let consequent = clause.cdr;\n            for(let each of consequent.loop()){ anObject = Evaluator.eval(each, this.environment, this.streamManager, this.depth); }\n            return anObject;\n        }\n    }\n\n    /**\n     * 第1引数を関数名、第2引数を関数の引数、第3引数を式とする関数を定義するメソッド\n     * @param {Cons} aCons 評価するCons\n     * @return {*} 評価結果\n     */\n    defun(aCons)\n    {\n        let variable = aCons.car;\n        let lambda = aCons.cdr;\n        if(aCons.length() == 2){ lambda = lambda.car; }\n        else { lambda = new Cons(InterpretedSymbol.of(\"lambda\"), lambda); }\n        lambda = Evaluator.eval(lambda, new Table(this.environment), this.streamManager, this.depth);\n        this.environment.set(variable, lambda);\n\n        return variable;\n    }\n\n    /**\n     * 条件が成立するまで繰り返し引数の評価を並列に行うメソッド\n     * @param {Cons} aCons 評価するCons\n     * @return {*} 評価結果\n     */\n    do_(aCons)\n    {\n        let parameters = aCons.car;\n        let bool = aCons.nth(2);\n        let expressions = aCons.cdr.cdr;\n        this.bindingParallel(parameters, this.environment);\n        if(Cons.isNil(bool)){ bool.setCar(Cons.nil); }\n\n        while(true)\n        {\n            let theTable = new Map();\n            let value;\n            if(Cons.isNotNil(Evaluator.eval(bool.car, this.environment, this.streamManager, this.depth))){ break; }\n            for(let each of expressions.loop()){ Evaluator.eval(each, this.environment, this.streamManager, this.depth); }\n            for(let each of parameters.loop())\n            {\n                let theCons = each;\n                if(Cons.isNotSymbol(theCons.car)){ selectPrintFunction()('\\\"' + theCons.car + '\\\" is not symbol'); }\n                let key = theCons.car;\n                if(Cons.isNotNil(theCons.nth(3)))\n                {\n                    value = Evaluator.eval(theCons.nth(3), this.environment, this.streamManager, this.depth);\n                    theTable.set(key, value);\n                }\n            }\n            for(let [key, value] of theTable){ this.environment.set(key, value); }\n        }\n        return Evaluator.eval(bool.nth(2), this.environment, this.streamManager, this.depth);\n    }\n\n    /**\n     * リストの各要素に対して繰り返し引数の評価を順番に行うメソッド\n     * @param {Cons} aCons 評価するCons\n     * @return {*} 評価結果\n     */\n    doList(aCons)\n    {\n        let parameter = aCons.car;\n        let theCons = aCons.cdr;\n        let args = Evaluator.eval(parameter.nth(2), this.environment, this.streamManager, this.depth);\n        for(let element of args.loop())\n        {\n            this.environment.set(parameter.car, element);\n            for(let each of theCons.loop()){ Evaluator.eval(each, this.environment, this.streamManager, this.depth); }\n        }\n\n        return Evaluator.eval(parameter.nth(3), this.environment, this.streamManager, this.depth);\n    }\n\n    /**\n     * 条件が成立するまで繰り返し引数の評価を順番に行うメソッド\n     * @param {Cons} aCons 評価するCons\n     * @return {*} 評価結果\n     */\n    doStar(aCons)\n    {\n        let parameters = aCons.car;\n        let bool = aCons.nth(2);\n        let expressions = aCons.cdr.cdr;\n        this.binding(parameters, this.environment);\n        if(Cons.isNil(bool)){ bool.setCar(Cons.nil); }\n\n        while(true)\n        {\n            if(Cons.isNotNil(Evaluator.eval(bool.car, this.environment, this.streamManager, this.depth))){ break; }\n            for(let each of expressions.loop()){ Evaluator.eval(each, this.environment, this.streamManager, this.depth); }\n            for(let each of parameters.loop())\n            {\n                let theCons = each;\n                if(Cons.isNotSymbol(theCons.car)){ selectPrintFunction()('\\\"' + theCons.car + '\\\" is not symbol'); }\n                let key = theCons.car;\n                let value;\n                if(Cons.isNotNil(theCons.nth(3)))\n                {\n                    value = Evaluator.eval(theCons.nth(3), this.environment, this.streamManager, this.depth);\n                    this.environment.set(key, value);\n                }\n            }\n        }\n        return Evaluator.eval(bool.nth(2), this.environment, this.streamManager, this.depth);\n    }\n\n    /**\n     * EvaluatorでできないことをApplierに任せ、結果を応答するメソッド\n     * @param {*} form 評価するCons、又はスペシャルフォーム\n     * @return {*} 計算結果\n     */\n    entrustApplier(form)\n    {\n        let aCons = form.cdr;\n        let args = new Cons(Cons.nil, Cons.nil);\n        let procedure = form.car;\n        let aSymbol = null;\n\n        if(Cons.isSymbol(procedure)){ aSymbol = procedure; }\n        if(this.isSpy(aSymbol))\n        {\n            this.spyPrint(this.streamManager.spyStream(aSymbol), form.toString());\n            this.setDepth(this.depth + 1);\n        }\n\n        for(let each of aCons.loop())\n        {\n            if(each instanceof Table){ break; }\n            args.add(Evaluator.eval(each, this.environment, this.streamManager, this.depth));\n        }\n        if(this.isSpy(aSymbol)){ this.setDepth(this.depth - 1); }\n\n        args = args.cdr;\n        let anObject = Applier.apply(procedure, args, this.environment, this.streamManager, this.depth);\n        return anObject;\n    }\n\n    /**\n     * Evaluatorを実行するメソッド\n     * @param {*} form 評価するCons、又はスペシャルフォーム\n     * @param {Table} environment 環境のテーブル（予約語）\n     * @param {StreamManager} aStreamManager \n     * @param {Number} depth 呼び出しの深さ\n     * @return {*} 計算結果\n     */\n    static eval(form, environment, aStreamManager = new StreamManager(), depth = 1)\n    {\n        return new Evaluator(environment, aStreamManager, depth).eval(form);\n    }\n    \n    /**\n     * Evaluatorを実行するメソッド\n     * @param {*} form 評価するCons、又はスペシャルフォーム\n     * @return {*} 計算結果\n     */\n    eval(form)\n    {\n        if(Cons.isSymbol(form)){ return this.evaluateSymbol(form); }\n        if(Cons.isNil(form) || Cons.isAtom(form)){ return form; }\n        if(Cons.isSymbol(form.car) &&  Evaluator.buildInFunctions.has(form.car)){ return this.specialForm(form); }\n\n        return this.entrustApplier(form);\n    }\n\n    /**\n     * Evaluatorを実行するメソッド\n     * @param {Cons} aCons 評価するCons\n     * @return {*} 評価結果\n     */\n    eval_lisp(aCons)\n    {\n        return Evaluator.eval(Evaluator.eval(aCons.car, this.environment, this.streamManager, this.depth), this.environment, this.streamManager, this.depth);\n    }\n\n    /**\n     * インタプリテッドインタプリテッドシンボルを評価して応答するメソッド\n     * @param {InterpretedSymbol} aSymbol インタプリテッドシンボル\n     * @return {InterpretedSymbol} 評価したインタプリテッドシンボル\n     */\n    evaluateSymbol(aSymbol)\n    {\n        let answer = Cons.nil;\n        if(aSymbol != null && this.environment.has(aSymbol))\n        {\n            if(this.isSpy(aSymbol))\n            {\n                this.spyPrint(this.streamManager.spyStream(aSymbol), aSymbol.toString());\n                this.setDepth(this.depth + 1);\n            }\n\n            answer = this.environment.get(aSymbol);\n            if(answer instanceof Cons && answer.cdr instanceof Table){ answer = answer.car; }\n\n            if(this.isSpy(aSymbol))\n            {\n                this.setDepth(this.depth - 1);\n                this.spyPrint(this.streamManager.spyStream(aSymbol), answer + ' <== ' + aSymbol);\n            }\n        }\n        else{ selectPrintFunction()(\"I could find no variable binding for \" + aSymbol); }\n\n        return answer;\n    }\n\n    /**\n     * 処理系を終了するメソッド\n     * @param {*} args 引数\n     */\n    exit(args = null)\n    {\n        selectPrintFunction()('Bye!');\n        selectPrintFunction()('Can\\'t close the browser\\'s tabs due to security issues.')\n        return Cons.nil;\n    }\n\n    /**\n     * ガベージコレクタを実行するメソッド\n     * @param {*} args 引数\n     * @return {InterpretedSymbol} インタプリテッドシンボルt\n     */\n    gc(args = null)\n    {\n        selectPrintFunction()('Can\\'t to garbage-collect.')\n        return InterpretedSymbol.of('t');\n    }\n\n    /**\n     * 最初の式が成り立つ時、後ろの式を評価していくメソッド\n     * @param {Cons} aCons 評価するCons\n     * @return {*} 評価結果\n     */\n    if_(aCons)\n    {\n        let anObject = Cons.nil;\n        let bool = Evaluator.eval(aCons.car, this.environment, this.streamManager, this.depth);\n        if(Cons.isNil(bool)){ anObject = aCons.nth(3); }\n        else{ anObject = aCons.nth(2); }\n\n        return Evaluator.eval(anObject, this.environment, this.streamManager, this.depth);\n    }\n\n    /**\n\t * 深さ分のインデント文字列を応答するメソッド\n\t * @return {String} インデント文字列\n\t */\n    indent()\n    {\n        let index = 0;\n        let aString = new String();\n        aString += \"\";\n        while(index++ < this.depth){ aString += \"| \"; }\n\n        return aString; \n    }\n\n    /**\n     * スパイする必要があるかどうかを判別し、応答するメソッド\n     * @param {InterpretedSymbol} aSymbol\n     * @return {Boolean} 真偽値\n     */\n    isSpy(aSymbol)\n    {\n        if(aSymbol == null){ return false; }\n        return this.streamManager.isSpy(aSymbol);\n    }\n\n    /**\n     * 第1引数をラムダ式の引数、第2引数を式とするラムダ式を生成するメソッド\n     * @param {Cons} args 引数\n     * @return {*} 評価結果\n     */\n    lambda(args)\n    {\n        let aCons = Cons.cloneValue(args)\n        let theCons = aCons.cdr;\n        theCons.setCdr(new Cons(this.environment, Cons.nil));\n\n        return new Cons(InterpretedSymbol.of('lambda'), aCons);\n    }\n\n    /**\n     * 明示的に新しい環境を構築するメソッド\n     * 引数の評価は順番に行う。\n     * @param {Cons} aCons 評価するCons\n     * @return {*} 評価結果\n     */\n    let(aCons)\n    {\n        let aTable = new Table(this.environment);\n        let parameters = aCons.car;\n        let forms = aCons.cdr;\n        let anObject = Cons.nil;\n        this.bindingParallel(parameters, aTable);\n        for(let each of forms.loop()){ anObject = Evaluator.eval(each, aTable, this.streamManager, this.depth) }\n\n        return anObject;\n    }\n\n    /**\n     * 明示的に新しい環境を構築するメソッド\n     * 引数の評価は並列に行う。\n     * @param {Cons} aCons 評価するCons\n     * @return {*} 評価結果\n     */\n    letStar(aCons)\n    {\n        let aTable = new Table(this.environment);\n        let parameters = aCons.car;\n        let forms = aCons.cdr;\n        let anObject = Cons.nil;\n        this.binding(parameters, aTable);\n        for(let each of forms.loop()){ anObject = Evaluator.eval(each, aTable, this.streamManager, this.depth) }\n\n        return anObject;\n    }\n\n    /**\n     * 引数を評価し、その論理否定を応答するメソッド\n     * @param {Cons} aCons 評価するCons\n     * @return {*} 評価結果\n     */\n    not(aCons)\n    {\n        if (Cons.isNil(Evaluator.eval(aCons.car, this.environment, this.streamManager, this.depth))){ return InterpretedSymbol.of('t'); }\n        return Cons.nil;\n    }\n\n    /**\n     * トレースしないように設定するメソッド\n     * @param {*} args 引数\n     * @return {InterpretedSymbol} インタプリテッドシンボルt\n     */\n    notrace(args = null)\n    {\n        this.streamManager.noTrace();\n\t\treturn InterpretedSymbol.of(\"t\");\n    }\n\n    /**\n     * 引数を評価し、その論理和を応答するメソッド\n     * @param {Cons} aCons 評価するCons\n     * @return {*} 評価結果\n     */\n    or(aCons)\n    {\n        for(let each of aCons.loop())\n        {\n            let anObject = Evaluator.eval(each, this.environment, this.streamManager, this.depth);\n            if(Cons.isNotNil(anObject)){ return InterpretedSymbol.of('t'); }\n        }\n\n        return Cons.nil;\n    }\n\n    /**\n     * 第1引数のインタプリテッドシンボルに束縛されたリストから先頭の要素を取り出し、応答するメソッド\n     * @param {*} aCons 評価するCons\n     * @return {*} 評価結果\n     */\n    pop_(aCons)\n    {\n        if(Cons.isNotSymbol(aCons.car)){ selectPrintFunction()('arguments 1 is not symbol.'); }\n        let aSymbol = aCons.car;\n        let anObject = Evaluator.eval(aSymbol, this.environment, this.streamManager, this.depth);\n        if(Cons.isNotCons(anObject)){ return Cons.nil; }\n        this.environment.setIfExit(aSymbol, anObject.cdr);\n\n        return anObject.car;\n    }\n\n    /**\n     * 式を順番に評価していくメソッド\n     * @param {*} aCons 評価するCons\n     * @return {*} 評価結果\n     */\n    progn(aCons)\n    {\n        let anObject = Cons.nil;\n        let theCons = aCons.car;\n        this.bindingParallel(theCons, this.environment);\n        theCons = aCons.cdr;\n        for(let each of theCons.loop()){ anObject = Evaluator.eval(each, this.environment, this.streamManager, this.depth); }\n\n        return anObject;\n    }\n\n    /**\n     * 引数を改行ありで出力する関数\n     * @param {Cons} aCons 評価するCons\n     * @return {*} 評価結果\n     */\n    print(aCons)\n    {\n        let anObject = Evaluator.eval(aCons.car, this.environment, this.streamManager, this.depth);\n        selectPrintFunction()(anObject);\n\n        return anObject;\n\n    }\n\n    /**\n     * 引数を改行なしで出力する関数\n     * @param {Cons} aCons 評価するCons\n     * @return {*} 評価結果\n     */\n    princ(aCons)\n    {\n        let anObject = Evaluator.eval(aCons.car, this.environment, this.streamManager, this.depth);\n        selectPrintFunction()(String(anObject), '');\n\n        return anObject;\n\n    }\n\n    /**\n     * 第2引数のインタプリテッドシンボルに束縛されたシンボルに対して、第1引数の値をリストの先頭に登録し、応答するメソッド\n     * @param {*} aCons 評価するCons\n     * @return {*} 評価結果\n     */\n    push_(aCons)\n    {\n        let anObject = Evaluator.eval(aCons.car, this.environment, this.streamManager, this.depth);\n        if(Cons.isNotSymbol(aCons.nth(2))){ selectPrintFunction()('arguments 2 is not symbol.'); }\n        let aSymbol = aCons.nth(2);\n        anObject = new Cons(anObject, Evaluator.eval(aSymbol, this.environment, this.streamManager, this.depth));\n        this.environment.setIfExit(aSymbol, anObject);\n\n        return anObject;\n    }\n\n    /**\n     * 参照を応答するメソッド\n     * @param {Cons} aCons 評価するCons\n     * @return {*} 評価結果\n     */\n    quote(aCons)\n    {\n        return aCons.car;\n    }\n\n    /**\n     * ブラウザをリロードするメソッド、KeiLisp-onWeb専用。\n     * @param {*} args 引数\n     */\n    reload(args = null)\n    {\n        selectPrintFunction()('Reload this page...')\n        location.reload()\n        return InterpretedSymbol.of('t');\n    }\n\n    /**\n     * 第２引数で指定されたリストの先頭の要素に第1引数で指定した値を設定し、応答するメソッド\n     * @param {Cons} args 引数\n     * @return {*} 評価結果\n     */\n    rplaca(args)\n    {\n        let anObject = Evaluator.eval(args.car, this.environment, this.streamManager, this.depth);\n        if(Cons.isNotCons(anObject)){ selectPrintFunction()('Can not apply \\\"set-car!\\\" to \\\"' + anObject + '\\\"'); return Cons.nil; }\n        let aCons = anObject;\n        anObject = Evaluator.eval(args.nth(2), this.environment, this.streamManager, this.depth);\n        aCons.setCar(anObject);\n\n        return Evaluator.eval(args.car, this.environment, this.streamManager, this.depth);\n    }\n\n    /**\n     * 第２引数で指定されたリストの先頭以外の要素に第1引数で指定した値を設定し、応答するメソッド\n     * @param {Cons} args 引数\n     * @return {*} 評価結果\n     */\n    rplacd(args)\n    {\n        let anObject = Evaluator.eval(args.car, this.environment, this.streamManager, this.depth);\n        if(Cons.isNotCons(anObject)){ selectPrintFunction()('Can not apply \\\"set-cdr!\\\" to \\\"' + anObject + '\\\"'); return Cons.nil; }\n        let aCons = anObject;\n        anObject = Evaluator.eval(args.nth(2), this.environment, this.streamManager, this.depth);\n        aCons.setCdr(anObject);\n\n        return Evaluator.eval(args.car, this.environment, this.streamManager, this.depth);\n    }\n\n    /**\n     * 現環境にのみにキーと値を束縛するメソッド\n     * @param {Cons} args 引数\n     * @return {*} 評価結果\n     */\n    setq(args)\n    {\n        let anObject = Cons.nil;\n        let anIterator = args.loop();\n        let index = -1;\n\n        while(anIterator.hasNext())\n        {\n            let key = null;\n\n            if(Cons.isSymbol(args.nth(index + 2))){ key = anIterator.next(); }\n            else{ selectPrintFunction()('\\\"' + args.car + '\\\" is not symbol'); }\n\n            if(!anIterator.hasNext()){ selectPrintFunction()('sizes do not match.'); }\n            anObject = Evaluator.eval(anIterator.next(), this.environment, this.streamManager, this.depth);\n            this.environment.set(key, anObject);\n        }\n\n        return anObject;\n    }\n\n    /**\n     * 環境全てにキーと値を束縛するメソッド\n     * キーと値を上書きする’\n     * @param {Cons} args 引数\n     * @return {*} 評価結果\n     */\n    set_allq(args)\n    {\n        let anObject = Cons.nil;\n        let anIterator = args.loop();\n        let index = -1;\n\n        while(anIterator.hasNext())\n        {\n            let key = null;\n\n            if(Cons.isSymbol(args.nth(index + 2))){ key = anIterator.next(); }\n            else{ selectPrintFunction()('\\\"' + args.car + '\\\" is not symbol'); }\n            anObject = Evaluator.eval(anIterator.next(), this.environment, this.streamManager, this.depth);\n            this.environment.setIfExit(key, anObject);\n        }\n\n        return anObject;\n    }\n\n    /**\n     * 呼び出しの深さを設定するメソッド\n     * @param {Number} aNumber 呼び出しの深さ\n     * @return {Null} 何も返さない。\n     */\n    setDepth(aNumber)\n    {\n        this.depth = aNumber;\n        return null;\n    }\n\n    /**\n     * Lispの関数とJSの関数を紐づけるテーブルを応答するメソッド\n     * @return {Table} 生成したテーブル\n     */\n    static setup()\n    {\n        try\n        {\n            let aTable = new Map();\n            aTable.set(InterpretedSymbol.of(\"and\"), \"and\");\n\t\t\taTable.set(InterpretedSymbol.of(\"apply\"), \"apply_lisp\");\n            aTable.set(InterpretedSymbol.of(\"bind\"), \"bind\");\n            aTable.set(InterpretedSymbol.of(\"clear\"), \"clear\");\n\t\t\taTable.set(InterpretedSymbol.of(\"cond\"), \"cond\");\n\t\t\taTable.set(InterpretedSymbol.of(\"defun\"), \"defun\");\n\t\t\taTable.set(InterpretedSymbol.of(\"do\"), \"do_\");\n\t\t\taTable.set(InterpretedSymbol.of(\"dolist\"), \"doList\");\n\t\t\taTable.set(InterpretedSymbol.of(\"do*\"), \"doStar\");\n\t\t\taTable.set(InterpretedSymbol.of(\"eval\"), \"eval_lisp\");\n\t\t\taTable.set(InterpretedSymbol.of(\"exit\"), \"exit\");\n\t\t\taTable.set(InterpretedSymbol.of(\"gc\"), \"gc\");\n\t\t\taTable.set(InterpretedSymbol.of(\"if\"), \"if_\");\n            aTable.set(InterpretedSymbol.of(\"lambda\"), \"lambda\");\n\t\t\taTable.set(InterpretedSymbol.of(\"let\"), \"let\");\n\t\t\taTable.set(InterpretedSymbol.of(\"let*\"), \"letStar\");\n\t\t\taTable.set(InterpretedSymbol.of(\"not\"), \"not\");\n\t\t\taTable.set(InterpretedSymbol.of(\"notrace\"), \"notrace\");\n\t\t\taTable.set(InterpretedSymbol.of(\"or\"), \"or\");\n\t\t\taTable.set(InterpretedSymbol.of(\"pop\"), \"pop_\");\n            aTable.set(InterpretedSymbol.of(\"progn\"), \"progn\");\n            aTable.set(InterpretedSymbol.of(\"princ\"), \"princ\");\n            aTable.set(InterpretedSymbol.of(\"print\"), \"print\");\n\t\t\taTable.set(InterpretedSymbol.of(\"push\"), \"push_\");\n            aTable.set(InterpretedSymbol.of(\"quote\"), \"quote\");\n            aTable.set(InterpretedSymbol.of(\"reload\"), \"reload\");\n            aTable.set(InterpretedSymbol.of(\"rplaca\"), \"rplaca\");\n\t\t\taTable.set(InterpretedSymbol.of(\"rplacd\"), \"rplacd\");\n\t\t\taTable.set(InterpretedSymbol.of(\"setq\"), \"setq\");\n            aTable.set(InterpretedSymbol.of(\"set-allq\"), \"set_allq\");\n            aTable.set(InterpretedSymbol.of(\"terpri\"), \"terpri\");\n            aTable.set(InterpretedSymbol.of(\"time\"), \"time\");\n\t\t\taTable.set(InterpretedSymbol.of(\"trace\"), \"trace\");\n\t\t\taTable.set(InterpretedSymbol.of(\"unless\"), \"unless\");\n            aTable.set(InterpretedSymbol.of(\"when\"), \"when\");\n            \n            return aTable;\n        }\n        catch(e){ throw new Error('NullPointerException (Evaluator, initialize)'); }\n    }\n\n    /**\n     * スペシャルフォームを評価するメソッド\n     * @param {Cons} form スペシャルフォーム\n     * @return {*} 評価結果\n     * \n     */\n    specialForm(form)\n    {\n        let aSymbol = form.car;\n\n        if(this.isSpy(aSymbol))\n        {\n            this.spyPrint(this.streamManager.spyStream(aSymbol), form.toString());\n            this.setDepth(this.depth + 1);\n        }\n    \n        let aCons = form.cdr;\n        let methodName = Evaluator.buildInFunctions.get(aSymbol);\n\n        try { let method = this[methodName]; }\n        catch(e){ throw new Error('Not Found Method: ' + methodName); }\n\n        let answer = R.invoker(1, methodName)(aCons, this);\n\n        if(this.isSpy(aSymbol))\n        {\n            this.setDepth(this.depth - 1);\n            this.spyPrint(this.streamManager.spyStream(aSymbol), answer + ' <== ' + aSymbol);\n        }\n        \n        return answer;\n    }\n    \n    spyPrint(aStream, line)\n    {\n        let aPrintStream = process.stdout;\n        if(aStream != null){ selectPrintFunction()(aStream); }\n        selectPrintFunction()(this.indent() + line);\n        if(aStream != null){ selectPrintFunction()(aPrintStream); }\n        return null;\n    }\n\n    /**\n     * 改行を出力するメソッド\n     * @param {*} args 引数\n     * @return {InterpretedSymbol} インタプリテッドシンボルt\n     */\n    terpri(args = null)\n    {\n        selectPrintFunction()('');\n        return InterpretedSymbol.of('t');\n    }\n\n    /**\n     * 引数で与えられた式を評価するのにかかった時間（ms）を応答するメソッド\n     * @param {Cons} aCons 評価するCons\n     * @return {Number} 評価にかかった時間（ms）\n     */\n    time(aCons)\n    {\n        const start = performance.now()\n        Evaluator.eval(aCons.car, this.environment, this.streamManager, this.depth);\n        const end = performance.now() - start;\n\n        return end;\n\n    }\n\n    /**\n     * トレースするように設定するメソッド\n     * @param {Cons} aCons トレースするCons\n     * @return {InterpretedSymbol} インタプリテッドシンボルt\n     */\n    trace(aCons = null)\n    {\n        this.streamManager.trace();\n        return InterpretedSymbol.of('t');\n    }\n\n    /**\n     * 最初の式が成り立たない時、後ろの式を順次評価していくメソッド\n     * @param {Cons} aCons 評価するCons\n     * @return {*} 評価結果\n     */\n    unless(aCons)\n    {\n        let anObject = Cons.nil;\n        let theCons = aCons.cdr;\n        let flag = Evaluator.eval(aCons.car, this.environment, this.streamManager, this.depth);\n        if(Cons.isNotNil(flag)){ return Cons.nil; }\n        for(let each of theCons.loop()){ anObject = Evaluator.eval(each, this.environment, this.streamManager, this.depth); }\n        \n        return anObject;\n    }\n\n    /**\n     * 最初の式が成り立つ時、後ろの式を順次評価していくメソッド\n     * @param {Cons} aCons 評価するCons\n     * @return {*} 評価結果\n     */\n    when(aCons)\n    {\n        let anObject = Cons.nil;\n        let theCons = aCons.cdr;\n        let flag = Evaluator.eval(aCons.car, this.environment, this.streamManager, this.depth);\n        if(Cons.isNil(flag)){ return Cons.nil; }\n        for(let each of theCons.loop()){ anObject = Evaluator.eval(each, this.environment, this.streamManager, this.depth); }\n        \n        return anObject;\n    }\n}\n","// #!/usr/bin/env node\n\n'use strict';\n\n/**\n * @class\n * @classdesc Consのイテレータクラス\n * @author Keisuke Ikeda\n * @this {Loop}\n */\nexport class Loop extends Object\n{\n    /**\n     * コンストラクタメソッド\n     * @constructor\n     * @param {Cons} aCons イテレートするCons\n     * @return {Loop} 自身\n     */\n    constructor(aCons)\n    {\n        super();\n        // \bイテレートするCons\n        this.aCons = aCons;\n        // イテレートするConsの長さ\n        this.length = aCons.length();\n        // インデックス番号\n        this.index = 1;\n\n        return this;\n    }\n\n    /**\n     * 自身を応答するメソッド\n     * @return {Loop} 自身\n     */\n    iterator()\n    {\n        return this;\n    }\n\n    /**\n     * 次の要素があるかどうかを判別し、応答するメソッド\n     * @return {Boolean} 真偽値\n     */\n    hasNext()\n    {\n        return this.index <= this.length;\n    }\n\n    /**\n     * 次の要素を応答するメソッド\n     * @return {Object} 自身\n     */\n    next() \n    {\n        let anObject = this.aCons.nth(this.index);\n        this.remove();\n\n        return anObject;\n    }\n\n    /**\n     * 反復可能プロトコルiteratorの実装\n     * for...ofなどでのイテレートが可能になる。\n     */\n    [Symbol.iterator](){\n        return {\n            next: () => {\n                if(this.index <= this.length)\n                {\n                    let nextValue = this.aCons.nth(this.index);\n                    this.remove();\n                    return { value : nextValue, done : false };\n                } \n                else \n                {\n                    return { done : true };\n                }\n            }\n        }\n    }\n    \n    /**\n     * 非同期反復可能プロトコルasyncIteratorの実装\n     * for...ofなどでのイテレートが可能になる。\n     */\n    [Symbol.asyncIterator](){\n        return {\n            next: () => {\n                if(this.index <= this.length)\n                {\n                    let nextValue = this.aCons.nth(this.index);\n                    this.remove();\n                    return Promise.resolve({ value : nextValue, done : false });\n                } \n                else \n                {\n                    return Promise.resolve({ done : true });\n                }\n            }\n        }\n    }\n\n    /**\n     * 次の要素へ移行するメソッド\n     * @return {Null} 何も返さない。\n     */\n    remove()\n    {\n        this.index++;\n        return null;\n    }\n}\n","// #!/usr/bin/env node\n\n'use strict';\n\n/**\n * @class\n * @classdesc JavaのIntStreamを模倣したクラス\n * @author Keisuke Ikeda\n * @this {IntStream}\n */\nexport class IntStream\n{\n    /**\n     * startからafterEnd(含めない)までの連番の配列を作り、応答するメソッド\n     * @param {Number} start 開始番号\n     * @param {Number} afterEnd 終了番号の一つ後ろの番号（含めない）\n     * @return {Array} 連番の配列\n     */\n    static range(start, afterEnd)\n    {\n        let end = afterEnd - 1;\n        return this.rangeClosed(start, end);\n    }\n\n    /**\n     * startからend(含める)までの連番の配列を作り、応答するメソッド\n     * @param {Number} start 開始番号\n     * @param {Number} afterEnd 終了番号（含める）\n     * @return {Array} 連番の配列\n     */\n    static rangeClosed(start, end)\n    {\n        let range = end - start + 1;\n        return [... new Array(range)].map(() => start++);\n    }\n}\n","// #!/usr/bin/env node\n\n'use strict';\n\n// ライブラリ「Ramda」を読み込む。\nimport * as R from 'ramda'; \n\n/**\n * @class\n * @classdesc 次の状態を保持するクラス\n * @author Keisuke Ikeda\n * @this {NextState}\n */\nexport class NextState extends Object\n{\n    /**\n     * コンストラクタメソッド\n     * @constructor\n     * @param {Number} aNumber \n     * @param {String} aString\n     * @return {NextState} 自身\n     */\n    constructor(aNumber, aString)\n    {\n        super();\n        this.automaton;\n        this.nextState = aNumber;\n        this.method = null;\n        this.methodName = aString;\n\n        return this;\n    }\n\n    /**\n     * 入力された文字に対応するメソッドを呼び出し、トークン番号を応答するメソッド\n     * @param {Parser} anAutomaton パースするためのメソッドを呼び出すインスタンス\n     * @return {Number} 環境の状況を表す数字、トークン番号\n     */\n    next(anAutomaton)\n    {\n        this.automaton = anAutomaton;\n        if(this.methodName == null){ return Number(this.nextState); }\n        if(this.method == null)\n        {\n            try { this.method = this.automaton[this.methodName]; }\n            catch(e){ throw new Error('Not Found Method: ' + this.methodName); }\n        }\n\n        let aNumber = -1;\n        try\n        {\n            if(this.nextState != null){ aNumber = this.nextState; }\n            let anObject = R.invoker(0, this.methodName)(this.automaton);\n            if(anObject != null){ aNumber = Number(anObject); }\n        }\n        catch(e) { throw new Error('Not Invoke Method: ' + this.methodName); }\n\n        return Number(aNumber);\n    }\n} \n","// #!/usr/bin/env node\n\n'use strict';\n\n// モジュール「Cons」を読み込む。\nimport { Cons } from './Cons.js';\n\n//モジュール「InterpretedSymbol」を読み込む。\nimport { InterpretedSymbol } from './InterpretedSymbol';\n\n// モジュール「IntStream」を読み込む。\nimport { IntStream } from './IntStream.js';\n\n// モジュール「NextState」を読み込む。\nimport { NextState } from './NextState.js';\n\n// 一時的に読み込む最大文字数\nconst PEEKCOUNT = 10;\n\n/**\n * @class\n * @classdesc パース（構文解析）を行うクラス\n * @author Keisuke Ikeda\n * @this {Parser}\n */\nexport class Parser extends Object\n{\n    /**\n     * コンストラクタメソッド\n     * @constructor\n     * @param {String} aString 解析する文字列\n     * @return {Parser} 自身\n     */\n    constructor(aString)\n    {\n        super();\n        this.stream = aString[Symbol.iterator]();\n        this.token\n        this.tokenString = '';\n        this.states = new Map();\n        this.state = 0;\n        this.initializeStateTransitionTable();\n        this.nexts = Array(PEEKCOUNT + 1);\n        let count = 0;\n        while (count++ < PEEKCOUNT){ this.nextChar(); }\n        \n        return this;\n    }\n\n    /**\n     * 最後の要素かどうかを判別し、応答するメソッド\n     * @return {Boolean} 真偽値\n     */\n    atEnd()\n    {\n        return (this.peekChar() == null);\n    }\n\n    /**\n     * 文字を連結するメソッド\n     * @return {Null} 何も返さない \n     */\n    concatCharacter()\n    {\n        this.tokenString = this.tokenString.concat(String(this.nexts[0]));\n        return null;\n    }\n\n    /**\n     * パースする文字列のある1文字を引数とし、パースするメソッド\n     * @param {*} aCharacter パースする1文字\n     * @return {Null} 何も返さない \n     */\n    input(aCharacter = (() => {\n        let aCharacter = this.nextChar();\n        return (aCharacter != null) ? aCharacter : null;\n    })())\n    {\n        // Mapオブジェクト「states」から変数stateに合ったTableオブジェクトを取得し、変数inputsに束縛する。\n        let inputs = new Map();\n        inputs = this.states.get(Number(this.state));\n\n        // Tableオブジェクト「inputs」から引数の1文字「aCharacter」の文字コードに対応したメソッドを実行し、値を取得する。\n        let aNumber = new Number();\n        aNumber = (inputs.has(String(aCharacter.charCodeAt(0)))) ? inputs.get(String(aCharacter.charCodeAt(0))).next(this) : inputs.get(String(128)).next(this);\n\n        if(aNumber < 0){ throw new Error('Syntax Error!'); }\n        this.state = aNumber;\n\n        return null;\n    }\n\n    /**\n     * パースする文字列から次にパースする1文字を応答するメソッド\n     * @return {String} 次にパースする1文字\n     */\n    nextChar()\n    {\n        // 文字を文字コードに変換して変数aNumberに格納する。\n        let aCharacter = null;\n        try\n        {   \n            let aNumber = (() => {\n                let value = this.stream.next().value;\n                return (value != null) ? value.charCodeAt() : -1;\n            })()\n            if(aNumber >= 0){ aCharacter = String.fromCodePoint(aNumber); }\n        }\n        catch(e){ throw new Error('Read Error!'); }\n\n        // 解析する文字列を1文字ずらす。\n        let count = 0;\n        while(count < PEEKCOUNT)\n        {\n            this.nexts[count] = this.nexts[count + 1];\n            count++;\n        }\n        this.nexts[count] = aCharacter;\n\n        return this.nexts[0];\n    }\n\n    /**\n     * 次のトークンを確認し、応答するメソッド\n     * @return {Cons} トークン\n     */\n    nextToken()\n    {\n        this.token = null;\n\n        while(this.atEnd() == false)\n        {\n            if((this.state == 0) && (this.token != null)){ break; }\n            this.input();\n        }\n        if(this.atEnd())\n        {\n            if(this.state != 0){ throw new Error('Syntax Error!'); }\n        }\n        this.tokenString = \"\";\n\n        return this.token;\n    }\n\n    /**\n     * クラス「NextState」をインスタンス化し、応答するメソッド\n     * @return {NextState} 次の状態\n     */\n    nextState(aNumber, aString)\n    {\n        return new NextState(aNumber, aString);\n    }\n\n    /**\n     * 引数の文字列をパースし、応答するメソッド\n     * @param {String} aString\n     * @return {*}  \n     */\n    static parse(aString)\n    {\n        return new Parser(aString).nextToken();\n    }\n\n    /**\n     * 次の文字が存在するかどうかを判断し、次の文字を応答するメソッド\n     * @return {String} 次の文字\n     */\n    peekChar(aNumber = 1)\n    {\n        if(aNumber > this.nexts.length){ throw new Error('Read Error!'); }\n        return this.nexts[aNumber];\n    }\n\n    /**\n     * NextStateによって呼び出される、文字連結を行うメソッド\n     * @return {Null} 何も返さない\n     */\n    concat()\n    {\n        this.concatCharacter();\n        return null;\n    }\n\n    /**\n     * NextStateによって呼び出される、Number型(倍精度浮動小数点数：擬似的なDouble型)のトークン番号で応答するメソッド\n     * @return {Number} トークン番号\n     */\n    doubleToken()\n    {\n        this.concat();\n        if(this.rightParen())\n        {\n            this.tokenToDouble();\n            return 0;\n        }\n\n        return 3;\n    }\n\n    /**\n     * NextStateによって呼び出される、Number型(倍精度浮動小数点数：擬似的なDouble型)のトークン番号で応答するメソッド\n     * @return {Number} トークン番号\n     */\n    doubleTokenAUX()\n    {\n        this.concat();\n        if(this.rightParen())\n        {\n            this.tokenToDouble();\n            return 0;\n        }\n\n        return 5;\n    }\n\n    /**\n     * NextStateによって呼び出される、Number型(整数値：擬似的なInteger型)のトークン番号で応答するメソッド\n     * @return {Number} トークン番号\n     */\n    integerToken()\n    {\n        this.concat();\n        if(this.rightParen())\n        {\n            this.tokenToInteger();\n            return 0;\n        }\n\n        return 2;\n    }\n\n    /**\n     * NextStateによって呼び出される、トークンをリスト（Cons）にし、トークンをリスト（Cons）のトークン番号で応答するメソッド\n     * @return {Number} トークン番号\n     */\n    parseList()\n    {\n        this.skippingSpaces();\n        if(this.rightParen())\n        {\n            this.nextChar();\n            this.token = Cons.nil;\n        }\n        else { this.token  = this.parseListAUX(); }\n\n        return 0;\n    }\n\n    /**\n     * NextStateによって呼び出される、トークンをリスト（Cons）にするためのメソッド\n     * @return {Cons} 作ったリスト（Cons）\n     */\n    parseListAUX()\n    {\n        this.skippingSpaces();\n        if (this.peekChar() == '#' || this.peekChar() == '%')\n        {\n            while (this.peekChar() != '\\n') { this.nextChar(); }\n            this.nextChar();\n            this.skippingSpaces();\n        }\n        if (this.rightParen())\n        {\n            this.nextChar();\n            return Cons.nil;\n        }\n        else if (this.peekChar() == '.')\n        {\n            this.nextChar();\n            this.state = 0;\n            let cdr = this.nextToken();\n            this.skippingSpaces();\n            if (this.rightParen() == false) { throw new Error('Syntax Error!'); }\n            this.nextChar();\n\n            return cdr;\n        }\n        else\n        {\n            this.state = 0;\n            return new Cons(this.nextToken(), this.parseListAUX());\n        }\n    }\n\n    /**\n     * NextStateによって呼び出される、クォートを認識し、トークンをリスト（Cons）にしてトークン番号を応答するメソッド\n     * @return {Number} トークン番号\n     */\n    quote()\n    {\n        let anObject = new Cons(this.nextToken(), Cons.nil);\n        this.token = new Cons(InterpretedSymbol.of(\"quote\"), anObject);\n\n        return Number(0);\n    }\n\n    /**\n     * NextStateによって呼び出される、クォートまたはString型の0オリジン(擬似的なCharacter型)のトークン番号を応答するメソッド\n     * @return {Number} トークン番号\n     */\n    quoteOrChar()\n    {\n        let aNumber = (this.peekChar() == '\\\\') ? 3 : 2;\n        if (this.peekChar(aNumber) == '\\'') { aNumber = 11; }\n        else { aNumber = this.quote(); }\n\n        return aNumber;\n    }\n\n    /**\n     * NextStateによって呼び出される、右括弧(')', ']', '}')を判別し、応答するメソッド\n     * @return {Boolean} 真偽値\n     */\n    rightParen()\n    {\n        return (this.peekChar() == ')' || this.peekChar() == ']' || this.peekChar() == '}' );\n    }\n\n    /**\n     * NextStateによって呼び出される、記号（'+', '-'）のトークン番号で応答するメソッド\n     * @return {Number} トークン番号\n     */\n    sign()\n    {\n        this.concat();\n        if(this.rightParen())\n        {\n            this.tokenToInteger();\n            return 0;\n        }\n\n        return 7;\n    }\n\n    /**\n     * NextStateによって呼び出される、空白文字を無視するメソッド\n     * @return {Null} 何も返さない\n     */\n    skippingSpaces()\n    {\n        while(this.nexts[1] == String.fromCodePoint(9) || this.nexts[1] == String.fromCodePoint(10) || this.nexts[1] == String.fromCodePoint(11) || this.nexts[1] == String.fromCodePoint(12) || this.nexts[1] == String.fromCodePoint(13) || this.nexts[1] == String.fromCodePoint(32))\n        {\n            this.nextChar();\n        }\n        \n        return null;\n    }\n\n    /**\n     * NextStateによって呼び出される、InterpretedSymbol型のトークン番号で応答するメソッド\n     * @return {Number} トークン番号\n     */\n    symbolToken()\n    {\n        this.concat();\n        if(this.rightParen())\n        {\n            this.tokenToSymbol();\n            return 0;\n        }\n\n        return 8;\n    }\n\n    /**\n     * NextStateによって呼び出される、トークンをString型の0オリジン(擬似的なCharacter型)にするメソッド\n     * @return {Null} 何も返さない\n     */\n    tokenToCharacter()\n    {\n        this.token = String(this.tokenString[0]);\n        return;\n    }\n\n    /**\n     * NextStateによって呼び出される、トークンをNumber型(倍精度浮動小数点数：擬似的なDouble型)にするメソッド\n     * @return {Null} 何も返さない\n     */\n    tokenToDouble()\n    {\n        this.token = Number(this.tokenString);\n        return;\n    }\n\n    /**\n     * NextStateによって呼び出される、トークンをNumber型(倍精度浮動小数点数：擬似的なDouble型)にするメソッド\n     * @return {Null} 何も返さない\n     */\n    tokenToDoubleAUX()\n    {\n        this.concat();\n        this.token = Number(this.tokenString);\n        return;\n    }\n\n    /**\n     * NextStateによって呼び出される、トークンをNumber型(整数値：擬似的なInteger型)にするメソッド\n     * @return {Null} 何も返さない\n     */\n    tokenToInteger()\n    {\n        let aCharacter = this.tokenString[0];\n        if(aCharacter == '+'){ this.tokenString = this.tokenString.substring(1, this.tokenString.length); }\n        this.token = Number(this.tokenString);\n        return;\n    }\n\n    /**\n     * NextStateによって呼び出される、トークンをString型にするメソッド\n     * @return {Null} 何も返さない\n     */\n    tokenToString()\n    {\n        this.token = this.tokenString;\n        return null;\n    }\n\n    /**\n     * NextStateによって呼び出される、トークンをInterpretedSymbol型にするメソッド\n     * @return {Null} 何も返さない\n     */\n    tokenToSymbol()\n    {\n        this.token = InterpretedSymbol.of(this.tokenString);\n        if (this.token ==  InterpretedSymbol.of(\"nil\")) { this.token = Cons.nil; }\n        return null;\n    }\n\n    /**\n     * 文字コードと対応するメソッド（トークン）の対応表を生成するメソッド\n     * @return {Null} 何も返さない。\n     */\n    initializeStateTransitionTable()\n    {\n        let aTable = new Map();\n        IntStream.rangeClosed(0, 8).forEach(index => aTable.set(String(index), this.nextState(-1, null)) );\n        IntStream.rangeClosed(9, 13).forEach(index => aTable.set(String(index), this.nextState(0, null)));\n        IntStream.rangeClosed(14, 31).forEach(index => aTable.set(String(index), this.nextState(-1, null)));\n        aTable.set(String(32), this.nextState(0, null));\n        aTable.set(String(33), this.nextState(8, \"symbolToken\"));\n        aTable.set(String(34), this.nextState(9, null));\n        aTable.set(String(35), this.nextState(1, null));\n        aTable.set(String(36), this.nextState(8, \"symbolToken\"));\n        aTable.set(String(37), this.nextState(1, null));\n        aTable.set(String(38), this.nextState(8, \"symbolToken\"));\n        aTable.set(String(39), this.nextState(-1, \"quoteOrChar\"));\n        aTable.set(String(40), this.nextState(-1, \"parseList\"));\n        aTable.set(String(41), this.nextState(-1, null));\n        aTable.set(String(42), this.nextState(8, \"symbolToken\"));\n        aTable.set(String(43), this.nextState(7, \"sign\"));\n        aTable.set(String(44), this.nextState(8, \"symbolToken\"));\n        aTable.set(String(45), this.nextState(7, \"sign\"));\n        aTable.set(String(46), this.nextState(-1, null));\n        aTable.set(String(47), this.nextState(8, \"symbolToken\"));\n        IntStream.rangeClosed(48, 57).forEach(index => aTable.set(String(index), this.nextState(2, \"integerToken\")));\n        IntStream.rangeClosed(58, 90).forEach(index => aTable.set(String(index), this.nextState(8, \"symbolToken\")));\n        aTable.set(String(91), this.nextState(-1, \"parseList\"));\n        aTable.set(String(92), this.nextState(-1, null));\n        aTable.set(String(93), this.nextState(-1, null));\n        aTable.set(String(94), this.nextState(8, \"symbolToken\"));\n        aTable.set(String(95), this.nextState(8, \"symbolToken\"));\n        aTable.set(String(96), this.nextState(0, \"quote\"));\n        IntStream.rangeClosed(97, 122).forEach(index => aTable.set(String(index), this.nextState(8, \"symbolToken\")));\n        aTable.set(String(123), this.nextState(-1, \"parseList\"));\n        aTable.set(String(124), this.nextState(8, \"symbolToken\"));\n        aTable.set(String(125), this.nextState(-1, null));\n        aTable.set(String(126), this.nextState(8, \"symbolToken\"));\n        aTable.set(String(127), this.nextState(-1, null));\n        aTable.set(String(128), this.nextState(-1, null));\n        this.states.set(Number(0), aTable);\n\n        aTable = new Map();\n        IntStream.rangeClosed(0, 8).forEach(index => aTable.set(String(index), this.nextState(-1, null)));\n        aTable.set(String(10), this.nextState(0, null));\n        aTable.set(String(13), this.nextState(0, null));\n        IntStream.rangeClosed(14, 31).forEach(index => aTable.set(String(index), this.nextState(-1, null)));\n        aTable.set(String(127), this.nextState(-1, null));\n        aTable.set(String(128), this.nextState(1, null));\n        this.states.set(Number(1), aTable);\n\n        aTable = new Map();\n        IntStream.rangeClosed(9, 13).forEach(index => aTable.set(String(index), this.nextState(0, \"tokenToInteger\")));\n        aTable.set(String(32), this.nextState(0, \"tokenToInteger\"));\n        aTable.set(String(46), this.nextState(3, \"doubleToken\"));\n        IntStream.rangeClosed(48, 57).forEach(index => aTable.set(String(index), this.nextState(2, \"integerToken\")));\n        aTable.set(String(69), this.nextState(4, \"concat\"));\n        aTable.set(String(101), this.nextState(4, \"concat\"));\n        aTable.set(String(128), this.nextState(-1, null));\n        this.states.set(Number(2), aTable);\n\n        aTable = new Map();\n        IntStream.rangeClosed(9, 13).forEach(index => aTable.set(String(index), this.nextState(0, \"tokenToDouble\")));\n        aTable.set(String(32), this.nextState(0, \"tokenToDouble\"));\n        IntStream.rangeClosed(48, 57).forEach(index => aTable.set(String(index), this.nextState(3, \"doubleToken\")));\n        aTable.set(String(68), this.nextState(0, \"tokenToDoubleAUX\"));\n        aTable.set(String(69), this.nextState(4, \"concat\"));\n        aTable.set(String(100), this.nextState(0, \"tokenToDoubleAUX\"));\n        aTable.set(String(101), this.nextState(4, \"concat\"));\n        aTable.set(String(128), this.nextState(-1, null));\n        this.states.set(Number(3), aTable);\n\n        aTable = new Map();\n        aTable.set(String(43), this.nextState(6, \"concat\"));\n        aTable.set(String(45), this.nextState(6, \"concat\"));\n        IntStream.rangeClosed(48, 57).forEach(index => aTable.set(String(index), this.nextState(5, \"doubleTokenAUX\")));\n        aTable.set(String(128), this.nextState(-1, null));\n        this.states.set(Number(4), aTable);\n\n        aTable = new Map();\n        IntStream.rangeClosed(9, 13).forEach(index => aTable.set(String(index), this.nextState(0, \"tokenToDouble\")));\n        aTable.set(String(32), this.nextState(0, \"tokenToDouble\"));\n        IntStream.rangeClosed(48, 57).forEach(index => aTable.set(String(index), this.nextState(5, \"doubleTokenAUX\")));\n        aTable.set(String(128), this.nextState(-1, null));\n        this.states.set(Number(5), aTable);\n\n        aTable = new Map();\n        IntStream.rangeClosed(48, 57).forEach(index => aTable.set(String(index), this.nextState(5, \"doubleTokenAUX\")));\n        aTable.set(String(128), this.nextState(-1, null));\n        this.states.set(Number(6), aTable);\n\n        aTable = new Map();\n        IntStream.rangeClosed(9, 13).forEach(index => aTable.set(String(index), this.nextState(0, \"tokenToSymbol\")));\n        aTable.set(String(32), this.nextState(0, \"tokenToSymbol\"));\n        aTable.set(String(33), this.nextState(8, \"symbolToken\"));\n        IntStream.rangeClosed(35, 38).forEach(index => aTable.set(String(index), this.nextState(8, \"symbolToken\")));\n        IntStream.rangeClosed(42, 45).forEach(index => aTable.set(String(index), this.nextState(8, \"symbolToken\")));\n        aTable.set(String(47), this.nextState(8, \"symbolToken\"));\n        IntStream.rangeClosed(48, 57).forEach(index => aTable.set(String(index), this.nextState(2, \"integerToken\")));\n        IntStream.rangeClosed(58, 90).forEach(index => aTable.set(String(index), this.nextState(8, \"symbolToken\")));\n        aTable.set(String(94), this.nextState(8, \"symbolToken\"));\n        aTable.set(String(95), this.nextState(8, \"symbolToken\"));\n        IntStream.rangeClosed(97, 122).forEach(index => aTable.set(String(index), this.nextState(8, \"symbolToken\")));\n        aTable.set(String(124), this.nextState(8, \"symbolToken\"));\n        aTable.set(String(126), this.nextState(8, \"symbolToken\"));\n        aTable.set(String(128), this.nextState(-1, null));\n        this.states.set(Number(7), aTable);\n\n        aTable = new Map();\n        IntStream.rangeClosed(9, 13).forEach(index => aTable.set(String(index), this.nextState(0, \"tokenToSymbol\")));\n        aTable.set(String(32), this.nextState(0, \"tokenToSymbol\"));\n        aTable.set(String(33), this.nextState(8, \"symbolToken\"));\n        IntStream.rangeClosed(35, 38).forEach(index => aTable.set(String(index), this.nextState(8, \"symbolToken\")));\n        IntStream.rangeClosed(42, 45).forEach(index => aTable.set(String(index), this.nextState(8, \"symbolToken\")));\n        aTable.set(String(47), this.nextState(8, \"symbolToken\"));\n        IntStream.rangeClosed(48, 57).forEach(index => aTable.set(String(index), this.nextState(8, \"symbolToken\")));\n        IntStream.rangeClosed(58, 90).forEach(index => aTable.set(String(index), this.nextState(8, \"symbolToken\")));\n        aTable.set(String(94), this.nextState(8, \"symbolToken\"));\n        aTable.set(String(95), this.nextState(8, \"symbolToken\"));\n        IntStream.rangeClosed(97, 122).forEach(index => aTable.set(String(index), this.nextState(8, \"symbolToken\")));\n        aTable.set(String(124), this.nextState(8, \"symbolToken\"));\n        aTable.set(String(126), this.nextState(8, \"symbolToken\"));\n        aTable.set(String(128), this.nextState(-1, null));\n        this.states.set(Number(8), aTable);\n\n        aTable = new Map();\n        IntStream.rangeClosed(0, 31).forEach(index => aTable.set(String(index), this.nextState(-1, null)));\n        aTable.set(String(34), this.nextState(0, \"tokenToString\"));\n        aTable.set(String(92), this.nextState(10, null));\n        aTable.set(String(127), this.nextState(-1, null));\n        aTable.set(String(128), this.nextState(9, \"concat\"));\n        this.states.set(Number(9), aTable);\n\n        aTable = new Map();\n        IntStream.rangeClosed(0, 31).forEach(index => aTable.set(String(index), this.nextState(-1, null)));\n        aTable.set(String(127), this.nextState(-1, null));\n        aTable.set(String(128), this.nextState(9, \"concat\"));\n        this.states.set(Number(10), aTable);\n\n        aTable = new Map();\n        IntStream.rangeClosed(32, 38).forEach(index => aTable.set(String(index), this.nextState(12, \"concat\")));\n        IntStream.rangeClosed(40, 91).forEach(index => aTable.set(String(index), this.nextState(12, \"concat\")));\n        aTable.set(String(92), this.nextState(13, null));\n        IntStream.rangeClosed(93, 126).forEach(index => aTable.set(String(index), this.nextState(12, \"concat\")));\n        aTable.set(String(128), this.nextState(-1, null));\n        this.states.set(Number(11), aTable);\n\n        aTable = new Map();\n        aTable.set(String(39), this.nextState(0, \"tokenToCharacter\"));\n        aTable.set(String(128), this.nextState(-1, null));\n        this.states.set(Number(12), aTable);\n\n        aTable = new Map();\n        IntStream.rangeClosed(32, 38).forEach(index => aTable.set(String(index), this.nextState(12, \"concat\")));\n        IntStream.rangeClosed(40, 126).forEach(index => aTable.set(String(index), this.nextState(12, \"concat\")));\n        aTable.set(String(128), this.nextState(-1, null));\n        this.states.set(Number(13), aTable);\n\n        return null;\n    }\n}\n","// #!/usr/bin/env node\n\n'use strict';\n\n//モジュール「InterpretedSymbol」を読み込む。\nimport { InterpretedSymbol } from './InterpretedSymbol';\n\n//モジュール「Loop」を読み込む。\nimport { Loop } from './Loop';\n\n//モジュール「Parser」を読み込む。\nimport { Parser } from './Parser';\n\n//モジュール「Table」を読み込む。\nimport { Table } from './Table';\n\n/**\n * @class\n * @classdesc Consを模倣したクラス\n * @author Keisuke Ikeda\n * @this {Cons}\n */\nexport class Cons extends Object\n{\n    static nil = new Cons();\n\n    /**\n     * コンストラクタメソッド\n     * @constructor\n     * @param {*} car car、引数なしでnilが参照される。\n     * @param {*} cdr cdr、引数なしでnilが参照される。\n     * @return {Cons} 自身\n     */\n    constructor(car = Cons.nil, cdr = Cons.nil)\n    {\n        super();\n        this.car = car;\n        this.cdr = cdr;\n\n        return this;\n    }\n\n    /**\n     * Consの最後に指定された要素を加えるメソッド\n     * @param {*} anObject 加えるオブジェクト\n     * @return {Cons} 要素を加えたCons\n     */\n    add(anObject)\n    {\n        let aCons = new Cons(anObject, Cons.nil);\n        return this.nconc(aCons);\n    }\n\n    /**\n     * 自身（Cons）を複製し、応答するメソッド\n     * @return {Cons} 複製したCons\n     */\n    clone()\n    {\n        return new Cons(Cons.cloneValue(this.car), Cons.cloneValue(this.cdr));\n    }\n\n    /**\n     * 引数の値(Consの要素)を複製し、応答するメソッド\n     * @param {*} value Consの要素\n     * @return {*} 複製したConsの要素\n     */\n    static cloneValue(value)\n    {\n        if(Cons.isCons(value))  { return value.clone(); }\n        if(Cons.isNil(value))   { return Cons.nil }\n        if(Cons.isNumber(value)){ return Number(value); }\n        if(Cons.isString(value)){ return String(value); }\n        if(Cons.isSymbol(value)){ return value; }\n        if(Cons.isTable(value)) { return value; }\n        return value;\n    }\n\n    /**\n     * 自身と引数が等しいかをどうかを判別し、応答するメソッド\n     * @param {*} anObject 判別するオブジェクト\n     * @return {Boolean} 真偽値\n     */\n    equals(anObject)\n    {\n        if(Cons.isCons(anObject)){ return this.equalsAUX(this, anObject); }\n        return false;\n    }\n\n    /**\n     * 2つ引数がともにConsであり、等しいかをどうかを判別し、応答するメソッド\n     * @param {*} left 判別するオブジェクト\n     * @param {*} right 判別するオブジェクト\n     * @return {Boolean} 真偽値\n     */\n    equalsAUX(left, right)\n    {\n        if(left === right){ return true; }\n        if((Cons.isCons(left) && Cons.isCons(right)) == false){ return false; }\n        let leftCons = left;\n        let rightCons = right;\n        if(this.equalsAUX(leftCons.car, rightCons.car)){ return this.equalsAUX(leftCons.cdr, rightCons.cdr); }\n\n        return false;\n    }\n\n    /**\n     * 引数がAtomかどうかを判別し、応答するメソッド\n     * @param {*} anObject 判別するオブジェクト\n     * @return {Boolean} 真偽値\n     */\n    static isAtom(anObject)\n    {\n        return !(Cons.isCons(anObject));\n    }\n\n    /**\n     * 引数がConsかどうかを判別し、応答するメソッド\n     * @param {*} anObject 判別するオブジェクト\n     * @return {Boolean} 真偽値\n     */\n    static isCons(anObject)\n    {\n        return (anObject != Cons.nil) && (anObject instanceof Cons);\n    }\n\n    /**\n     * 引数がListかどうかを判別し、応答するメソッド\n     * @param {*} anObject 判別するオブジェクト\n     * @return {Boolean} 真偽値\n     */\n    static isList(anObject)\n    {\n        return Cons.isNil(anObject) || Cons.isCons(anObject);\n    }\n\n    /**\n     * 引数がNilかどうかを判別し、応答するメソッド\n     * @param {*} anObject 判別するオブジェクト\n     * @return {Boolean} 真偽値\n     */\n    static isNil(anObject)\n    {\n        return anObject == Cons.nil;\n    }\n\n    /**\n     * 引数がConsでないかどうかを判別し、応答するメソッド\n     * @param {*} anObject 判別するオブジェクト\n     * @return {Boolean} 真偽値\n     */\n    static isNotCons(anObject)\n    {\n        return !(Cons.isCons(anObject));\n    }\n\n    /**\n     * 引数がNilでないかどうかを判別し、応答するメソッド\n     * @param {*} anObject 判別するオブジェクト\n     * @return {Boolean} 真偽値\n     */\n    static isNotNil(anObject)\n    {\n        return !(Cons.isNil(anObject));\n    }\n\n    /**\n     * 引数がインタプリテッドシンボルでないかどうかを判別し、応答するメソッド\n     * @param {*} anObject 判別するオブジェクト\n     * @return {Boolean} 真偽値\n     */\n    static isNotSymbol(anObject)\n    {\n        return !(Cons.isSymbol(anObject));\n    }\n\n    /**\n     * 引数が数字かどうかを判別し、応答するメソッド\n     * @param {*} anObject 判別するオブジェクト\n     * @return {Boolean} 真偽値\n     */\n    static isNumber(anObject)\n    {\n        return (anObject instanceof Number || (typeof anObject) == \"number\");\n    }\n\n    /**\n     * 引数が文字列かどうかを判別し、応答するメソッド\n     * @param {*} anObject 判別するオブジェクト\n     * @return {Boolean} 真偽値\n     */\n    static isString(anObject)\n    {\n        return (anObject instanceof String || (typeof anObject) == \"string\");\n    }\n\n    /**\n     * 引数がインタプリテッドシンボルかどうかを判別し、応答するメソッド\n     * @param {*} anObject 判別するオブジェクト\n     * @return {Boolean} 真偽値\n     */\n    static isSymbol(anObject)\n    {\n        return anObject instanceof InterpretedSymbol;\n    }\n\n    /**\n     * 引数が環境かどうかを判別し、応答するメソッド\n     * @param {*} anObject 判別するオブジェクト\n     * @return {Boolean} 真偽値\n     */\n    static isTable(anObject)\n    {\n        return anObject instanceof Table;\n    }\n\n    /**\n     * Consの最後のセルを応答するメソッド\n     * @return {Cons} 自身の最後のセル\n     */\n    last()\n    {\n        let theCons = new Cons(Cons.nil, this);\n        let aCons = this;\n\n        while(Cons.isCons(aCons))\n        {\n            if(Cons.isCons(aCons.cdr) == false){ break; }\n            theCons = theCons.cdr;\n            aCons = aCons.cdr;\n        }\n\n        return aCons;\n    }\n\n    /**\n\t * Consのイテレータを応答するメソッド\n\t * @return {Loop} Consのイテレータ\n\t */\n    loop()\n    {\n        return new Loop(this);\n    }\n\n    /**\n     * 自身の長さ（深さ）を応答するメソッド\n     * @return {Number} 自身の長さ（深さ）\n     */\n    length()\n    {\n        let count = 0;\n        let aCons = this;\n\n        while(Cons.isCons(aCons))\n        {\n            count++;\n            aCons = aCons.cdr;\n        }\n\n        return count;\n    }\n\n    /**\n     * Consを結合するし、自身を応答するメソッド\n     * @param {Cons} aCons 結合するCons\n     * @return {Cons} 自身\n     */\n    nconc(aCons)\n    {\n        this.last().setCdr(aCons);\n        return this;\n    }\n\n    /**\n\t * Consのn番目の要素を応答するメソッド\n\t * @param {Number} aNumber 指定する番号\n\t * @return {Cons} 指定した番号の要素\n\t */\n    nth(aNumber)\n    {\n        if(aNumber <= 0){ return Cons.nil }\n        let count = 1;\n        let aCons = this;\n        while (Cons.isCons(aCons))\n        {\n            if(count >= aNumber){ return aCons.car; }\n            count++;\n            aCons = aCons.cdr;\n        }\n\n        return Cons.nil;\n    }\n\n    /**\n     * 指定された文字列を字句解析してConsを生成し、応答するメソッド\n     * @param {String} aString 字句解析する文字列\n     * @return {}\n     */\n    static parse(aString)\n    {\n        return Parser.parse(aString);\n    }\n\n    /**\n     * carを設定するメソッド\n     * @param {*} anObject car\n     * @return {Null} 何も返さない。\n     */\n    setCar(anObject)\n    {\n        this.car = anObject;\n        return null;\n    }\n\n    /**\n     * cdrを設定するメソッド\n     * @param {*} anObject cdr\n     * @return {Null} 何も返さない。\n     */\n    setCdr(anObject)\n    {\n        this.cdr = anObject;\n        return null;\n    }\n\n   /**\n     * Consを設定するメソッド\n     * @param {*} car car\n     * @param {*} cdr cdr\n     * @return {Cons} 自身\n     */\n    setCons(car, cdr)\n    {\n        this.car = car;\n        this.cdr = cdr;\n        return this;\n    }\n\n    /**\n     * 自身を整形し、文字列として返すメソッド\n     * @return {String} 自身を整形した文字列\n     */\n    toString()\n    {\n        let aString = new String();\n        if(Cons.isNil(this)){ aString += Cons.toString(Cons.nil); }\n        else\n        {\n            aString += '(' + Cons.toString(this.car);\n\n            if(Cons.isNil(this.cdr))\n            {\n                aString += ')';\n            }\n            else if(this.cdr instanceof Cons == false)\n            {\n                aString += ' . ' + Cons.toString(this.cdr) + ')';\n            }\n            else\n            {\n                let aCons = this.cdr;\n                while(true)\n                {\n                    let head = aCons.car;\n                    let tail = aCons.cdr;\n                    if(head instanceof Table == false)\n                    {\n                        aString += ' ' + Cons.toString(head);\n                    }\n                    if(Cons.isNil(tail))\n                    {\n                        aString += ')';\n                        break;\n                    }\n                    if(tail instanceof Cons == false)\n                    {\n                        aString += ' . ' + Cons.toString(tail) + ')';\n                        break;\n                    }\n                    aCons = tail;\n                }\n            }\n        }\n\n        return aString;\n    }\n\n    /**\n     * 引数のオブジェクトを整形し、文字列として返すメソッド\n     * @param {Object} anObject 整形するオブジェクト \n     * @return {String} 整形した文字列\n     */\n    static toString(anObject)\n    {\n        let aString = new String();\n        if(Cons.isNil(anObject))\n        {\n            aString += 'nil';\n        }\n        else if(anObject instanceof String)\n        {\n            aString += \"\\\"\" + anObject.toString() + \"\\\"\";\n        }\n        else\n        {\n            aString += anObject.toString();\n        }\n        \n        return aString;\n    }\n}\n","// #!/usr/bin/env node\n\n'use strict';\n\nimport { Table } from \"./Table\";\n\n/**\n * @class\n * @classdesc 一意性(同一性:単射性)を有するインタプリテッドシンボル.正準な文字列を模倣した、JSの標準シンボルとは異なるクラス。\n * @author Keisuke Ikeda\n * @this {InterpretedSymbol}\n */\nexport class InterpretedSymbol extends Object\n{\n    /**\n     * InterpretedSymbolを記憶させるテーブル\n     */\n    static table = new Table();\n\n    /**\n     * コンストラクタメソッド\n     * @constructor\n     * @param {String} name\n     * @return {InterpretedSymbol} 自身\n     */\n    constructor(name = 'null')\n    {\n        super();\n        this.name = name;\n        return this;\n    }\n\n    /**\n     * 印字名で自身と引数のインタプリテッドシンボルを比較するメソッド\n     * @param {InterpretedSymbol} aSymbol \n     * @return {Number} 文字列の長さの差\n     */\n    compareTo(aSymbol)\n    {\n        let aNumber = this.name.charCodeAt(0) < aSymbol.name.charCodeAt(0) ? aSymbol.name.length - this.name.charCodeAt : this.name.charCodeAt - aSymbol.name.length;\n        aNumber = this.name.charCodeAt(0) == aSymbol.name.charCodeAt(0) ? 0 : aNumber;\n\n        return aNumber;\n    }\n\n    /**\n     * 自身と引数のオブジェクトが等しいかどうかを判別し、応答するメソッド\n     * @param {*} anObject \n     * @return {Boolean} 真偽値\n     */\n    equals(anObject)\n    {\n        return this === anObject;\n    }\n    \n    /**\n     * 同じ印字名に対して同一のインタプリテッドシンボルを応答するメソッド\n     * @param {String} aString 印字名\n     * @return aSymbol 引数と同一のインタプリテッドシンボル\n     */\n    static of(aString)\n    {\n        let aSymbol = this.table.get(aString);       \n\n        if(aSymbol == null)\n        {\n            aSymbol = new InterpretedSymbol(aString);\n            this.table.set(aString, aSymbol);\n        }\n\n        return aSymbol;\n    }\n\n    /**\n     * 自身を文字列にして応答するメソッド\n     * @return {String} 自身の文字列\n     */\n    toString()\n    {\n        return this.name;\n    }\n}\n","// #!/usr/bin/env node\n\n'use strict';\n\n/**\n * @class\n * @classdesc \n * @author Keisuke Ikeda\n * @this {StreamManager}\n */\nexport class StreamManager extends Object\n{\n    /**\n     * コンストラクタメソッド\n     * @return {StreamManager} 自身\n     */\n    constructor()\n    {\n        super();\n        this.isTrace = false;\n        this.streamTable = new Map();\n        this.spyTable = new Map();\n        this.traceStream = null;\n        this.initialize();\n\n        return this;\n    }\n\n    getStream()\n    {\n        let aPrintStream = null;\n        if(this.isTrace){ return this.traceStream(); }\n        let filePath = process.env.HOME; \n        if(this.streamTable.has(filePath)){ aPrintStream = this.streamTable.get(filePath); }\n        \n        return aPrintStream;\n    }\n\n    /**\n     * インスタンス変数を初期設定するメソッド\n     * @return {Null} 何も返さない。\n     */\n    initialize()\n    {\n        this.streamTable.set(\"default\", process.stdout);\n        this.streamTable.set(\"stdout\", process.stdout);\n        this.streamTable.set(\"stderr\", process.stderr);\n\n        return null;\n    }\n\n    isSpy(aSymbol)\n    {\n        if(this.isTrace){ return true; }\n        if(this.spyTable_().has(aSymbol)){ return true; }\n        return false;\n    }\n\n    noSpy(aSymbol)\n    {\n        if(this.spyTable_().has(aSymbol))\n        {\n            this.spyTable_().delete(aSymbol);\n        }\n\n        return null;\n    }\n\n    noTrace()\n    {\n        this.setIsTrace(false);\n        this.spyTable.clear();\n\n        return null;\n    }\n\n    setIsTrace(aBoolean)\n    {\n        this.isTrace = aBoolean;\n        return null;\n    }\n\n    setTraceStream(aStream)\n    {\n        this.traceStream = aStream;\n        return null;\n    }\n\n    spy(aSymbol, aString)\n    {\n        let aPrintStream = null;\n        aPrintStream = this.getStream();\n        if(aPrintStream != null)\n        {\n            this.spyTable_().set(aSymbol, aString);\n        }\n\n        return null;\n    }\n\n    spyStream(aSymbol)\n    {\n        if(this.isTrace){ return this.traceStream; }\n        if(this.spyTable_().has(aSymbol))\n        {\n            return this.spyTable_().get(aSymbol);\n        }\n        throw new Error(\"Stream is not found.\");\n    }\n\n    spyTable_()\n    {\n        let aTable = new Map();\n        for(let [key, value] of this.spyTable){ aTable.set(key, value) }\n        return aTable;\n    }\n\n\n    trace()\n    {\n        let aPrintStream = null;\n        this.noTrace();\n        aPrintStream = this.getStream();\n        this.setTraceStream(aPrintStream);\n        this.setIsTrace(true);\n\n        return null;\n    }\n}\n"],"sourceRoot":""}